{"version":3,"sources":["pages/posts/list.tsx","pages/posts/create.tsx","pages/posts/edit.tsx","pages/posts/show.tsx","App.tsx","index.tsx"],"names":["Title","Typography","PostList","useTable","tableProps","categoryIds","filters","dataSource","map","item","category","id","useMany","enabled","length","data","isLoading","checkboxGroupProps","useCheckboxGroup","resource","categorySelectProps","useSelect","optionLabel","optionValue","selectProps","rowKey","Column","dataIndex","title","filterDropdown","props","level","Group","style","width","render","value","find","minWidth","mode","placeholder","mapValue","selectedKeys","_","record","size","recordItemId","PostCreate","useForm","formProps","saveButtonProps","useState","selectedTab","setSelectedTab","layout","Item","label","name","rules","required","options","onTabChange","generateMarkdownPreview","markdown","Promise","resolve","PostEdit","queryResult","postData","defaultValue","Text","PostShow","useShow","useOne","categoryData","categoryIsLoading","content","App","dataProvider","list","create","edit","show","ReactDOM","StrictMode","document","getElementById"],"mappings":"0NAqBQA,EAAUC,aAAVD,MAEKE,EAA+C,WAAO,IAAD,IAC9D,EAAgCC,qBAAxBC,EAAR,EAAQA,WAEFC,GAFN,EAAoBC,QAEH,iBACbF,QADa,IACbA,GADa,UACbA,EAAYG,kBADC,aACb,EAAwBC,KAAI,SAACC,GAAD,OAAUA,EAAKC,SAASC,aADvC,QAC8C,IAC/D,EAA4BC,kBAAmB,aAAcP,EAAa,CACtEQ,QAASR,EAAYS,OAAS,IAD1BC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,UAINC,EAAuBC,2BAAwB,CACnDC,SAAU,eADNF,mBAGaG,EAAwBC,oBAAqB,CAC9DF,SAAU,aACVG,YAAa,QACbC,YAAa,OAHTC,YAMR,OACI,cAAC,OAAD,UACI,eAAC,QAAD,2BAAWpB,GAAX,IAAuBqB,OAAO,KAA9B,UACI,cAAC,QAAMC,OAAP,CAAcC,UAAU,KAAKC,MAAM,OACnC,cAAC,QAAMF,OAAP,CACIC,UAAU,QACVC,MAAM,QACNC,eAAgB,SAACC,GAAD,OACZ,eAAC,iBAAD,2BAAoBA,GAApB,cACI,cAAC9B,EAAD,CAAO+B,MAAO,EAAd,0BACA,cAAC,WAASC,MAAV,aACIC,MAAO,CAAEC,MAAO,MACZjB,WAKpB,cAAC,QAAMS,OAAP,CACIC,UAAW,CAAC,WAAY,MACxBC,MAAM,WACNO,OAAQ,SAACC,GAAW,IAAD,EACf,OAAIpB,EACO,cAAC,YAAD,CAAWoB,MAAM,eAIxB,cAAC,YAAD,CACIA,MAAK,OACDrB,QADC,IACDA,GADC,UACDA,EAAMA,KAAKsB,MAAK,SAAC5B,GAAD,OAAUA,EAAKE,KAAOyB,YADrC,aACD,EACMR,SAKtBC,eAAgB,SAACC,GAAD,OACZ,cAAC,iBAAD,2BAAoBA,GAApB,aACI,cAAC,SAAD,aACIG,MAAO,CAAEK,SAAU,KACnBC,KAAK,WACLC,YAAY,mBACRpB,UAKpB,cAAC,QAAMM,OAAP,CACIC,UAAU,SACVC,MAAM,SACNO,OAAQ,SAACC,GAAD,OAAmB,cAAC,WAAD,CAAUA,MAAOA,KAC5CP,eAAgB,SAACC,GAAD,OACZ,cAAC,iBAAD,2BACQA,GADR,IAEIW,SAAU,SAACC,GACP,OAAOA,EAAa,IAH5B,SAMI,eAAC,QAAMV,MAAP,WACI,cAAC,QAAD,CAAOI,MAAM,YAAb,uBACA,cAAC,QAAD,CAAOA,MAAM,QAAb,mBACA,cAAC,QAAD,CAAOA,MAAM,WAAb,+BAKhB,cAAC,QAAMV,OAAP,CACIE,MAAM,UACND,UAAU,UACVQ,OAAQ,SAACQ,EAAGC,GAAJ,OACJ,eAAC,QAAD,WACI,cAAC,aAAD,CAAYC,KAAK,QAAQC,aAAcF,EAAOjC,KAC9C,cAAC,aAAD,CAAYkC,KAAK,QAAQC,aAAcF,EAAOjC,kB,6CC7F7DoC,G,OAAiD,WAC1D,MAAuCC,oBAA/BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,gBAEE9B,EAAwBC,oBAAqB,CAC9DF,SAAU,eADNK,YAIR,EACI2B,mBAA8B,SADlC,mBAAOC,EAAP,KAAoBC,EAApB,KAGA,OACI,cAAC,SAAD,CAAQH,gBAAiBA,EAAzB,SACI,eAAC,OAAD,2BAAUD,GAAV,IAAqBK,OAAO,WAA5B,UACI,cAAC,OAAKC,KAAN,CACIC,MAAM,QACNC,KAAK,QACLC,MAAO,CACH,CACIC,UAAU,IALtB,SASI,cAAC,QAAD,MAEJ,cAAC,OAAKJ,KAAN,CACIC,MAAM,WACNC,KAAM,CAAC,WAAY,MACnBC,MAAO,CACH,CACIC,UAAU,IALtB,SASI,cAAC,SAAD,eAAYvC,MAEhB,cAAC,OAAKmC,KAAN,CACIC,MAAM,SACNC,KAAK,SACLC,MAAO,CACH,CACIC,UAAU,IALtB,SASI,cAAC,SAAD,CACIC,QAAS,CACL,CACIJ,MAAO,YACPpB,MAAO,aAEX,CACIoB,MAAO,QACPpB,MAAO,SAEX,CACIoB,MAAO,WACPpB,MAAO,iBAKvB,cAAC,OAAKmB,KAAN,CACIC,MAAM,UACNC,KAAK,UACLC,MAAO,CACH,CACIC,UAAU,IALtB,SASI,cAAC,IAAD,CACIP,YAAaA,EACbS,YAAaR,EACbS,wBAAyB,SAACC,GAAD,OACrBC,QAAQC,QACJ,cAAC,IAAD,UAAgBF,kBC3EnCG,EAA+C,WAAO,IAAD,EAC9D,EAAoDlB,oBAA5CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,gBAAiBiB,EAApC,EAAoCA,YAE9BC,EAAQ,OAAGD,QAAH,IAAGA,GAAH,UAAGA,EAAapD,YAAhB,aAAG,EAAmBA,KACfK,EAAwBC,oBAAqB,CAC9DF,SAAU,aACVkD,aAAY,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAU1D,SAASC,KAF7Ba,YAKR,EACI2B,mBAA8B,SADlC,mBAAOC,EAAP,KAAoBC,EAApB,KAGA,OACI,cAAC,OAAD,CAAMH,gBAAiBA,EAAvB,SACI,eAAC,OAAD,2BAAUD,GAAV,IAAqBK,OAAO,WAA5B,UACI,cAAC,OAAKC,KAAN,CACIC,MAAM,QACNC,KAAK,QACLC,MAAO,CACH,CACIC,UAAU,IALtB,SASI,cAAC,QAAD,MAEJ,cAAC,OAAKJ,KAAN,CACIC,MAAM,WACNC,KAAM,CAAC,WAAY,MACnBC,MAAO,CACH,CACIC,UAAU,IALtB,SASI,cAAC,SAAD,eAAYvC,MAEhB,cAAC,OAAKmC,KAAN,CACIC,MAAM,SACNC,KAAK,SACLC,MAAO,CACH,CACIC,UAAU,IALtB,SASI,cAAC,SAAD,CACIC,QAAS,CACL,CACIJ,MAAO,YACPpB,MAAO,aAEX,CACIoB,MAAO,QACPpB,MAAO,SAEX,CACIoB,MAAO,WACPpB,MAAO,iBAKvB,cAAC,OAAKmB,KAAN,CACIC,MAAM,UACNC,KAAK,UACLC,MAAO,CACH,CACIC,UAAU,IALtB,SASI,cAAC,IAAD,CACIP,YAAaA,EACbS,YAAaR,EACbS,wBAAyB,SAACC,GAAD,OACrBC,QAAQC,QACJ,cAAC,IAAD,UAAgBF,iBCpFxC/D,EAAgBC,aAAhBD,MAAOsE,EAASrE,aAATqE,KAEFC,EAA+C,WACxD,IAAQJ,EAAgBK,oBAAhBL,YACApD,EAAoBoD,EAApBpD,KAAMC,EAAcmD,EAAdnD,UACR4B,EAAM,OAAG7B,QAAH,IAAGA,OAAH,EAAGA,EAAMA,KAErB,EACI0D,iBAAkB,cAAoB,OAAN7B,QAAM,IAANA,OAAA,EAAAA,EAAQlC,SAASC,KAAM,GAAI,CACvDE,UAAW+B,IAFL8B,EAAd,EAAQ3D,KAA+B4D,EAAvC,EAA4B3D,UAK5B,OACI,eAAC,OAAD,CAAMA,UAAWA,EAAjB,UACI,cAAC,EAAD,CAAOe,MAAO,EAAd,gBACA,cAACuC,EAAD,iBAAO1B,QAAP,IAAOA,OAAP,EAAOA,EAAQjC,KAEf,cAAC,EAAD,CAAOoB,MAAO,EAAd,mBACA,cAACuC,EAAD,iBAAO1B,QAAP,IAAOA,OAAP,EAAOA,EAAQhB,QAEf,cAAC,EAAD,CAAOG,MAAO,EAAd,sBACA,cAACuC,EAAD,UACKK,EAAoB,aAAH,OAAkBD,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAc3D,KAAKa,QAG3D,cAAC,EAAD,CAAOG,MAAO,EAAd,qBACA,cAAC,gBAAD,CAAeK,MAAK,OAAEQ,QAAF,IAAEA,OAAF,EAAEA,EAAQgC,cCf3BC,EAdO,WAClB,OACI,cAAC,SAAD,CAAQC,aAAcA,YAJd,oCAIR,SACI,cAAC,WAAD,CACIrB,KAAK,QACLsB,KAAM7E,EACN8E,OAAQjC,EACRkC,KAAMf,EACNgB,KAAMX,OCZtBY,IAAShD,OACL,cAAC,IAAMiD,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,U","file":"static/js/main.29895f37.chunk.js","sourcesContent":["import {\n    List,\n    Table,\n    TextField,\n    useTable,\n    IResourceComponentsProps,\n    Space,\n    EditButton,\n    ShowButton,\n    useMany,\n    FilterDropdown,\n    Typography,\n    Checkbox,\n    useCheckboxGroup,\n    useSelect,\n    Select,\n    Radio,\n    TagField,\n} from \"@pankod/refine\";\n\nimport { IPost, ICategory } from \"interfaces\";\nconst { Title } = Typography;\n\nexport const PostList: React.FC<IResourceComponentsProps> = () => {\n    const { tableProps, filters } = useTable<IPost>();\n\n    const categoryIds =\n        tableProps?.dataSource?.map((item) => item.category.id) ?? [];\n    const { data, isLoading } = useMany<ICategory>(\"categories\", categoryIds, {\n        enabled: categoryIds.length > 0,\n    });\n\n    const { checkboxGroupProps } = useCheckboxGroup<IPost>({\n        resource: \"categories\",\n    });\n    const { selectProps: categorySelectProps } = useSelect<ICategory>({\n        resource: \"categories\",\n        optionLabel: \"title\",\n        optionValue: \"id\",\n    });\n\n    return (\n        <List>\n            <Table {...tableProps} rowKey=\"id\">\n                <Table.Column dataIndex=\"id\" title=\"ID\" />\n                <Table.Column\n                    dataIndex=\"title\"\n                    title=\"Title\"\n                    filterDropdown={(props) => (\n                        <FilterDropdown {...props}>\n                            <Title level={5}>Rol Se√ßin</Title>\n                            <Checkbox.Group\n                                style={{ width: 200 }}\n                                {...checkboxGroupProps}\n                            />\n                        </FilterDropdown>\n                    )}\n                />\n                <Table.Column\n                    dataIndex={[\"category\", \"id\"]}\n                    title=\"Category\"\n                    render={(value) => {\n                        if (isLoading) {\n                            return <TextField value=\"Loading...\" />;\n                        }\n\n                        return (\n                            <TextField\n                                value={\n                                    data?.data.find((item) => item.id === value)\n                                        ?.title\n                                }\n                            />\n                        );\n                    }}\n                    filterDropdown={(props) => (\n                        <FilterDropdown {...props}>\n                            <Select\n                                style={{ minWidth: 200 }}\n                                mode=\"multiple\"\n                                placeholder=\"Select Category\"\n                                {...categorySelectProps}\n                            />\n                        </FilterDropdown>\n                    )}\n                />\n                <Table.Column\n                    dataIndex=\"status\"\n                    title=\"Status\"\n                    render={(value: string) => <TagField value={value} />}\n                    filterDropdown={(props: any) => (\n                        <FilterDropdown\n                            {...props}\n                            mapValue={(selectedKeys) => {\n                                return selectedKeys[0];\n                            }}\n                        >\n                            <Radio.Group>\n                                <Radio value=\"published\">Published</Radio>\n                                <Radio value=\"draft\">Draft</Radio>\n                                <Radio value=\"rejected\">Rejected</Radio>\n                            </Radio.Group>\n                        </FilterDropdown>\n                    )}\n                />\n                <Table.Column<IPost>\n                    title=\"Actions\"\n                    dataIndex=\"actions\"\n                    render={(_, record) => (\n                        <Space>\n                            <EditButton size=\"small\" recordItemId={record.id} />\n                            <ShowButton size=\"small\" recordItemId={record.id} />\n                        </Space>\n                    )}\n                />\n            </Table>\n        </List>\n    );\n};\n","import React, { useState } from \"react\";\nimport {\n    Create,\n    Form,\n    Input,\n    IResourceComponentsProps,\n    Select,\n    useForm,\n    useSelect,\n} from \"@pankod/refine\";\n\nimport ReactMarkdown from \"react-markdown\";\nimport ReactMde from \"react-mde\";\n\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\n\nimport { IPost, ICategory } from \"interfaces\";\n\nexport const PostCreate: React.FC<IResourceComponentsProps> = () => {\n    const { formProps, saveButtonProps } = useForm<IPost>();\n\n    const { selectProps: categorySelectProps } = useSelect<ICategory>({\n        resource: \"categories\",\n    });\n\n    const [selectedTab, setSelectedTab] =\n        useState<\"write\" | \"preview\">(\"write\");\n\n    return (\n        <Create saveButtonProps={saveButtonProps}>\n            <Form {...formProps} layout=\"vertical\">\n                <Form.Item\n                    label=\"Title\"\n                    name=\"title\"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label=\"Category\"\n                    name={[\"category\", \"id\"]}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Select {...categorySelectProps} />\n                </Form.Item>\n                <Form.Item\n                    label=\"Status\"\n                    name=\"status\"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Select\n                        options={[\n                            {\n                                label: \"Published\",\n                                value: \"published\",\n                            },\n                            {\n                                label: \"Draft\",\n                                value: \"draft\",\n                            },\n                            {\n                                label: \"Rejected\",\n                                value: \"rejected\",\n                            },\n                        ]}\n                    />\n                </Form.Item>\n                <Form.Item\n                    label=\"Content\"\n                    name=\"content\"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <ReactMde\n                        selectedTab={selectedTab}\n                        onTabChange={setSelectedTab}\n                        generateMarkdownPreview={(markdown) =>\n                            Promise.resolve(\n                                <ReactMarkdown>{markdown}</ReactMarkdown>,\n                            )\n                        }\n                    />\n                </Form.Item>\n            </Form>\n        </Create>\n    );\n};\n","import React, { useState } from \"react\";\nimport {\n    Edit,\n    Form,\n    Input,\n    IResourceComponentsProps,\n    Select,\n    useForm,\n    useSelect,\n} from \"@pankod/refine\";\n\nimport ReactMarkdown from \"react-markdown\";\nimport ReactMde from \"react-mde\";\n\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\n\nimport { IPost, ICategory } from \"interfaces\";\n\nexport const PostEdit: React.FC<IResourceComponentsProps> = () => {\n    const { formProps, saveButtonProps, queryResult } = useForm<IPost>();\n\n    const postData = queryResult?.data?.data;\n    const { selectProps: categorySelectProps } = useSelect<ICategory>({\n        resource: \"categories\",\n        defaultValue: postData?.category.id,\n    });\n\n    const [selectedTab, setSelectedTab] =\n        useState<\"write\" | \"preview\">(\"write\");\n\n    return (\n        <Edit saveButtonProps={saveButtonProps}>\n            <Form {...formProps} layout=\"vertical\">\n                <Form.Item\n                    label=\"Title\"\n                    name=\"title\"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label=\"Category\"\n                    name={[\"category\", \"id\"]}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Select {...categorySelectProps} />\n                </Form.Item>\n                <Form.Item\n                    label=\"Status\"\n                    name=\"status\"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Select\n                        options={[\n                            {\n                                label: \"Published\",\n                                value: \"published\",\n                            },\n                            {\n                                label: \"Draft\",\n                                value: \"draft\",\n                            },\n                            {\n                                label: \"Rejected\",\n                                value: \"rejected\",\n                            },\n                        ]}\n                    />\n                </Form.Item>\n                <Form.Item\n                    label=\"Content\"\n                    name=\"content\"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <ReactMde\n                        selectedTab={selectedTab}\n                        onTabChange={setSelectedTab}\n                        generateMarkdownPreview={(markdown) =>\n                            Promise.resolve(\n                                <ReactMarkdown>{markdown}</ReactMarkdown>,\n                            )\n                        }\n                    />\n                </Form.Item>\n            </Form>\n        </Edit>\n    );\n};\n","import {\n    useShow,\n    Show,\n    Typography,\n    IResourceComponentsProps,\n    useOne,\n    MarkdownField,\n} from \"@pankod/refine\";\n\nimport { IPost, ICategory } from \"interfaces\";\n\nconst { Title, Text } = Typography;\n\nexport const PostShow: React.FC<IResourceComponentsProps> = () => {\n    const { queryResult } = useShow<IPost>();\n    const { data, isLoading } = queryResult;\n    const record = data?.data;\n\n    const { data: categoryData, isLoading: categoryIsLoading } =\n        useOne<ICategory>(\"categories\", record?.category.id || \"\", {\n            enabled: !!record,\n        });\n\n    return (\n        <Show isLoading={isLoading}>\n            <Title level={5}>Id</Title>\n            <Text>{record?.id}</Text>\n\n            <Title level={5}>Title</Title>\n            <Text>{record?.title}</Text>\n\n            <Title level={5}>Category</Title>\n            <Text>\n                {categoryIsLoading ? \"Loading...\" : categoryData?.data.title}\n            </Text>\n\n            <Title level={5}>Content</Title>\n            <MarkdownField value={record?.content} />\n        </Show>\n    );\n};\n","import { Refine, Resource } from \"@pankod/refine\";\nimport dataProvider from \"@pankod/refine-simple-rest\";\nimport \"@pankod/refine/dist/styles.min.css\";\n\nimport { PostList, PostCreate, PostEdit, PostShow } from \"pages/posts\";\n\nconst API_URL = \"https://api.fake-rest.refine.dev\";\n\nconst App: React.FC = () => {\n    return (\n        <Refine dataProvider={dataProvider(API_URL)}>\n            <Resource\n                name=\"posts\"\n                list={PostList}\n                create={PostCreate}\n                edit={PostEdit}\n                show={PostShow}\n            />\n        </Refine>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}