
> refinejs-repo@0.0.0 biome
> biome lint .

./documentation/src/context/TutorialUIPackageContext/index.tsx:94:11 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: setPreferred
  
    92 │     };
    93 │ 
  > 94 │     React.useEffect(() => {
       │           ^^^^^^^^^
    95 │       if (dedicated && dedicated !== preferred) {
    96 │         setPreferred(dedicated);
  
  i This dependency is not specified in the hook dependency list.
  
    94 │     React.useEffect(() => {
    95 │       if (dedicated && dedicated !== preferred) {
  > 96 │         setPreferred(dedicated);
       │         ^^^^^^^^^^^^
    97 │       }
    98 │     }, [dedicated, preferred]);
  

./documentation/src/context/tutorial-parameter-context.tsx:82:9 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: currentParameters
  
    80 │   }, []);
    81 │ 
  > 82 │   React.useEffect(() => {
       │         ^^^^^^^^^
    83 │     try {
    84 │       const storedParameters = localStorage.getItem(
  
  i This dependency is not specified in the hook dependency list.
  
    101 │       setParameters({
    102 │         ...tutorialData.defaultParameters,
  > 103 │         ...currentParameters,
        │            ^^^^^^^^^^^^^^^^^
    104 │       });
    105 │     }
  
  i This dependency is not specified in the hook dependency list.
  
    95 │         setParameters({
    96 │           ...tutorialData.defaultParameters,
  > 97 │           ...currentParameters,
       │              ^^^^^^^^^^^^^^^^^
    98 │         });
    99 │       }
  
  i This dependency is not specified in the hook dependency list.
  
    90 │           ...tutorialData.defaultParameters,
    91 │           ...JSON.parse(storedParameters),
  > 92 │           ...currentParameters,
       │              ^^^^^^^^^^^^^^^^^
    93 │         });
    94 │       } else {
  
  i Either include them or remove the dependency array
  

./documentation/src/context/tutorial-parameter-context.tsx:82:9 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: setParameters
  
    80 │   }, []);
    81 │ 
  > 82 │   React.useEffect(() => {
       │         ^^^^^^^^^
    83 │     try {
    84 │       const storedParameters = localStorage.getItem(
  
  i This dependency is not specified in the hook dependency list.
  
     99 │       }
    100 │     } catch (e) {
  > 101 │       setParameters({
        │       ^^^^^^^^^^^^^
    102 │         ...tutorialData.defaultParameters,
    103 │         ...currentParameters,
  
  i This dependency is not specified in the hook dependency list.
  
    93 │         });
    94 │       } else {
  > 95 │         setParameters({
       │         ^^^^^^^^^^^^^
    96 │           ...tutorialData.defaultParameters,
    97 │           ...currentParameters,
  
  i This dependency is not specified in the hook dependency list.
  
    88 │       if (storedParameters) {
  > 89 │         setParameters({
       │         ^^^^^^^^^^^^^
    90 │           ...tutorialData.defaultParameters,
    91 │           ...JSON.parse(storedParameters),
  
  i Either include them or remove the dependency array
  

./documentation/src/components/checklist/index.tsx:37:9 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: reward
  
    35 │   }, []);
    36 │ 
  > 37 │   React.useEffect(() => {
       │         ^^^^^^^^^
    38 │     if (!celebrated && allChecked && mounted.current) {
    39 │       setCelebrated(true);
  
  i This dependency is not specified in the hook dependency list.
  
    38 │     if (!celebrated && allChecked && mounted.current) {
    39 │       setCelebrated(true);
  > 40 │       reward();
       │       ^^^^^^
    41 │     }
    42 │   }, [allChecked, celebrated]);
  

./documentation/src/components/tutorial-toc/index.tsx:115:9 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: locationHash
  
    113 │   const { hash: locationHash } = location;
    114 │ 
  > 115 │   React.useEffect(() => {
        │         ^^^^^^^^^
    116 │     const targetElement = document.getElementById(item.id);
    117 │ 
  
  i This dependency is not specified in the hook dependency list.
  
    122 │             if (entry.isIntersecting) {
    123 │               const hash = `#${item.id}`;
  > 124 │               if (hash !== locationHash) {
        │                            ^^^^^^^^^^^^
    125 │                 setActiveId(item.id);
    126 │                 window.history.replaceState({}, "", hash);
  

./documentation/src/components/tutorial-toc/index.tsx:115:9 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: setActiveId
  
    113 │   const { hash: locationHash } = location;
    114 │ 
  > 115 │   React.useEffect(() => {
        │         ^^^^^^^^^
    116 │     const targetElement = document.getElementById(item.id);
    117 │ 
  
  i This dependency is not specified in the hook dependency list.
  
    123 │               const hash = `#${item.id}`;
    124 │               if (hash !== locationHash) {
  > 125 │                 setActiveId(item.id);
        │                 ^^^^^^^^^^^
    126 │                 window.history.replaceState({}, "", hash);
    127 │               }
  

./documentation/src/components/banner/banner-image-with-text.tsx:37:9 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: description
  
    35 │   bannerName,
    36 │ }) => {
  > 37 │   React.useEffect(() => {
       │         ^^^^^^^^^
    38 │     if (
    39 │       typeof window !== "undefined" &&
  
  i This dependency is not specified in the hook dependency list.
  
    44 │         banner_name: bannerName,
    45 │         banner_text: title,
  > 46 │         banner_description: description,
       │                             ^^^^^^^^^^^
    47 │         banner_image: image.src,
    48 │       });
  

./documentation/src/components/banner/banner-image-with-text.tsx:37:9 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: image.src
  
    35 │   bannerName,
    36 │ }) => {
  > 37 │   React.useEffect(() => {
       │         ^^^^^^^^^
    38 │     if (
    39 │       typeof window !== "undefined" &&
  
  i This dependency is not specified in the hook dependency list.
  
    45 │         banner_text: title,
    46 │         banner_description: description,
  > 47 │         banner_image: image.src,
       │                       ^^^^^^^^^
    48 │       });
    49 │     }
  

./documentation/src/components/banner/banner-image-with-text.tsx:37:9 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: title
  
    35 │   bannerName,
    36 │ }) => {
  > 37 │   React.useEffect(() => {
       │         ^^^^^^^^^
    38 │     if (
    39 │       typeof window !== "undefined" &&
  
  i This dependency is not specified in the hook dependency list.
  
    43 │       window.gtag("event", "view_banner", {
    44 │         banner_name: bannerName,
  > 45 │         banner_text: title,
       │                      ^^^^^
    46 │         banner_description: description,
    47 │         banner_image: image.src,
  

./documentation/src/components/banner/banner-modal.tsx:52:3 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: isOpen
  
    50 │   const tracker = useScrollTracker();
    51 │ 
  > 52 │   useEffect(() => {
       │   ^^^^^^^^^
    53 │     if (pathname === "/blog/" || pathname === "/blog") return;
    54 │     if (scrollTresholdExceeded.current || isOpen) return;
  
  i This dependency is not specified in the hook dependency list.
  
    52 │   useEffect(() => {
    53 │     if (pathname === "/blog/" || pathname === "/blog") return;
  > 54 │     if (scrollTresholdExceeded.current || isOpen) return;
       │                                           ^^^^^^
    55 │ 
    56 │     if (tracker.scrollY > SCROLL_TRESHOLD && tracker.scrollY < SCROLL_MAX) {
  

./documentation/src/components/banner/banner-modal.tsx:52:3 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: setVisitCount
  
    50 │   const tracker = useScrollTracker();
    51 │ 
  > 52 │   useEffect(() => {
       │   ^^^^^^^^^
    53 │     if (pathname === "/blog/" || pathname === "/blog") return;
    54 │     if (scrollTresholdExceeded.current || isOpen) return;
  
  i This dependency is not specified in the hook dependency list.
  
    61 │         setVisitCount(0);
    62 │       } else {
  > 63 │         setVisitCount(visitCount + 1);
       │         ^^^^^^^^^^^^^
    64 │         scrollTresholdExceeded.current = true;
    65 │       }
  
  i This dependency is not specified in the hook dependency list.
  
    59 │       if (visitCount === MAX_VISIT_COUNT || visitCount === null) {
    60 │         setIsOpen(true);
  > 61 │         setVisitCount(0);
       │         ^^^^^^^^^^^^^
    62 │       } else {
    63 │         setVisitCount(visitCount + 1);
  

./documentation/src/components/banner/banner-modal.tsx:52:3 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: pathname
  
    50 │   const tracker = useScrollTracker();
    51 │ 
  > 52 │   useEffect(() => {
       │   ^^^^^^^^^
    53 │     if (pathname === "/blog/" || pathname === "/blog") return;
    54 │     if (scrollTresholdExceeded.current || isOpen) return;
  
  i This dependency is not specified in the hook dependency list.
  
    52 │   useEffect(() => {
  > 53 │     if (pathname === "/blog/" || pathname === "/blog") return;
       │                                  ^^^^^^^^
    54 │     if (scrollTresholdExceeded.current || isOpen) return;
    55 │ 
  
  i This dependency is not specified in the hook dependency list.
  
    52 │   useEffect(() => {
  > 53 │     if (pathname === "/blog/" || pathname === "/blog") return;
       │         ^^^^^^^^
    54 │     if (scrollTresholdExceeded.current || isOpen) return;
    55 │ 
  

./documentation/src/components/banner/banner-modal.tsx:52:3 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: visitCount
  
    50 │   const tracker = useScrollTracker();
    51 │ 
  > 52 │   useEffect(() => {
       │   ^^^^^^^^^
    53 │     if (pathname === "/blog/" || pathname === "/blog") return;
    54 │     if (scrollTresholdExceeded.current || isOpen) return;
  
  i This dependency is not specified in the hook dependency list.
  
    57 │       scrollTresholdExceeded.current = true;
    58 │ 
  > 59 │       if (visitCount === MAX_VISIT_COUNT || visitCount === null) {
       │                                             ^^^^^^^^^^
    60 │         setIsOpen(true);
    61 │         setVisitCount(0);
  
  i This dependency is not specified in the hook dependency list.
  
    57 │       scrollTresholdExceeded.current = true;
    58 │ 
  > 59 │       if (visitCount === MAX_VISIT_COUNT || visitCount === null) {
       │           ^^^^^^^^^^
    60 │         setIsOpen(true);
    61 │         setVisitCount(0);
  
  i This dependency is not specified in the hook dependency list.
  
    61 │         setVisitCount(0);
    62 │       } else {
  > 63 │         setVisitCount(visitCount + 1);
       │                       ^^^^^^^^^^
    64 │         scrollTresholdExceeded.current = true;
    65 │       }
  

./documentation/src/components/banner/banner-modal.tsx:69:3 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: image.src
  
    67 │   }, [tracker.scrollY]);
    68 │ 
  > 69 │   useEffect(() => {
       │   ^^^^^^^^^
    70 │     if (
    71 │       isOpen &&
  
  i This dependency is not specified in the hook dependency list.
  
    76 │         banner_name: "banner-modal",
    77 │         banner_text: title,
  > 78 │         banner_image: image.src,
       │                       ^^^^^^^^^
    79 │       });
    80 │     }
  

./documentation/src/components/banner/banner-modal.tsx:69:3 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: title
  
    67 │   }, [tracker.scrollY]);
    68 │ 
  > 69 │   useEffect(() => {
       │   ^^^^^^^^^
    70 │     if (
    71 │       isOpen &&
  
  i This dependency is not specified in the hook dependency list.
  
    75 │       window.gtag("event", "view_banner", {
    76 │         banner_name: "banner-modal",
  > 77 │         banner_text: title,
       │                      ^^^^^
    78 │         banner_image: image.src,
    79 │       });
  

./documentation/src/components/sandpack/use-resizable.tsx:47:9 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: onDragMove
  
    45 │   };
    46 │ 
  > 47 │   React.useEffect(() => {
       │         ^^^^^^^^^
    48 │     document.body.addEventListener("mousemove", onDragMove);
    49 │     document.body.addEventListener("mouseup", stopDragging);
  
  i This dependency is not specified in the hook dependency list.
  
    47 │   React.useEffect(() => {
  > 48 │     document.body.addEventListener("mousemove", onDragMove);
       │                                                 ^^^^^^^^^^
    49 │     document.body.addEventListener("mouseup", stopDragging);
    50 │ 
  
  i This dependency is not specified in the hook dependency list.
  
    51 │     return (): void => {
  > 52 │       document.body.removeEventListener("mousemove", onDragMove);
       │                                                      ^^^^^^^^^^
    53 │       document.body.removeEventListener("mouseup", stopDragging);
    54 │     };
  
  i Either include them or remove the dependency array
  

./documentation/src/components/sandpack/use-resizable.tsx:47:9 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: stopDragging
  
    45 │   };
    46 │ 
  > 47 │   React.useEffect(() => {
       │         ^^^^^^^^^
    48 │     document.body.addEventListener("mousemove", onDragMove);
    49 │     document.body.addEventListener("mouseup", stopDragging);
  
  i This dependency is not specified in the hook dependency list.
  
    47 │   React.useEffect(() => {
    48 │     document.body.addEventListener("mousemove", onDragMove);
  > 49 │     document.body.addEventListener("mouseup", stopDragging);
       │                                               ^^^^^^^^^^^^
    50 │ 
    51 │     return (): void => {
  
  i This dependency is not specified in the hook dependency list.
  
    51 │     return (): void => {
    52 │       document.body.removeEventListener("mousemove", onDragMove);
  > 53 │       document.body.removeEventListener("mouseup", stopDragging);
       │                                                    ^^^^^^^^^^^^
    54 │     };
    55 │   }, []);
  
  i Either include them or remove the dependency array
  

./documentation/src/components/live-preview/index.tsx:38:30 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: css
  
    36 │   const [url, setUrl] = React.useState<string | undefined>(undefined);
    37 │ 
  > 38 │   const compressCode = React.useCallback(
       │                              ^^^^^^^^^^^
    39 │     async (uncompressed: string) => {
    40 │       if (typeof window !== "undefined" && window.Worker) {
  
  i This dependency is not specified in the hook dependency list.
  
    48 │             setUrl(
    49 │               `${customFields.LIVE_PREVIEW_URL}?code=${data.compressed}${
  > 50 │                 css ? `&css=${base64url.encode(css)}` : ""
       │                                                ^^^
    51 │               }${query ? `${query}` : ""}`,
    52 │             );
  
  i This dependency is not specified in the hook dependency list.
  
    48 │             setUrl(
    49 │               `${customFields.LIVE_PREVIEW_URL}?code=${data.compressed}${
  > 50 │                 css ? `&css=${base64url.encode(css)}` : ""
       │                 ^^^
    51 │               }${query ? `${query}` : ""}`,
    52 │             );
  

./documentation/src/components/live-preview/index.tsx:38:30 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: customFields.LIVE_PREVIEW_URL
  
    36 │   const [url, setUrl] = React.useState<string | undefined>(undefined);
    37 │ 
  > 38 │   const compressCode = React.useCallback(
       │                              ^^^^^^^^^^^
    39 │     async (uncompressed: string) => {
    40 │       if (typeof window !== "undefined" && window.Worker) {
  
  i This dependency is not specified in the hook dependency list.
  
    47 │           if (data.compressed) {
    48 │             setUrl(
  > 49 │               `${customFields.LIVE_PREVIEW_URL}?code=${data.compressed}${
       │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    50 │                 css ? `&css=${base64url.encode(css)}` : ""
    51 │               }${query ? `${query}` : ""}`,
  

./documentation/src/refine-theme/landing-hero-showcase-section.tsx:9:35 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: activeApp.showcase
  
     7 │   const [activeApp, setActiveApp] = React.useState(apps[0]);
     8 │ 
   > 9 │   const ShowcaseComponent = React.useMemo(() => {
       │                                   ^^^^^^^
    10 │     return activeApp.showcase;
    11 │   }, [activeApp.name]);
  
  i This dependency is not specified in the hook dependency list.
  
     9 │   const ShowcaseComponent = React.useMemo(() => {
  > 10 │     return activeApp.showcase;
       │            ^^^^^^^^^^^^^^^^^^
    11 │   }, [activeApp.name]);
    12 │ 
  

The number of diagnostics exceeds the number allowed by Biome.
Diagnostics not shown: 623.
Checked 6952 file(s) in 488ms
