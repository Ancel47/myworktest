
> refinejs-repo@0.0.0 biome
> biome lint .

./examples/form-react-hook-form-use-form/src/pages/posts/edit.tsx:24:5 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: setValue
  
    22 │     });
    23 │ 
  > 24 │     useEffect(() => {
       │     ^^^^^^^^^
    25 │         setValue("category.id", queryResult?.data?.data?.category?.id);
    26 │     }, [queryResult?.data]);
  
  i This dependency is not specified in the hook dependency list.
  
    24 │     useEffect(() => {
  > 25 │         setValue("category.id", queryResult?.data?.data?.category?.id);
       │         ^^^^^^^^
    26 │     }, [queryResult?.data]);
    27 │ 
  

./packages/chakra-ui/src/components/pages/error/index.tsx:31:5 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: translate
  
    29 │     const { resource, action } = useResource();
    30 │ 
  > 31 │     useEffect(() => {
       │     ^^^^^^^^^
    32 │         if (resource && action) {
    33 │             setErrorMessage(
  
  i This dependency is not specified in the hook dependency list.
  
    32 │         if (resource && action) {
    33 │             setErrorMessage(
  > 34 │                 translate(
       │                 ^^^^^^^^^
    35 │                     "pages.error.info",
    36 │                     {
  

./examples/store/src/lib/focus-trap.tsx:55:5 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━━━

  ! This hook does not specify all of its dependencies: returnFocus
  
    53 │     };
    54 │ 
  > 55 │     useEffect(() => {
       │     ^^^^^^^^^
    56 │         setTimeout(trapFocus, 20);
    57 │         return () => {
  
  i This dependency is not specified in the hook dependency list.
  
    56 │         setTimeout(trapFocus, 20);
    57 │         return () => {
  > 58 │             returnFocus();
       │             ^^^^^^^^^^^
    59 │         };
    60 │     }, [root]);
  

./examples/store/src/lib/focus-trap.tsx:55:5 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━━━

  ! This hook does not specify all of its dependencies: trapFocus
  
    53 │     };
    54 │ 
  > 55 │     useEffect(() => {
       │     ^^^^^^^^^
    56 │         setTimeout(trapFocus, 20);
    57 │         return () => {
  
  i This dependency is not specified in the hook dependency list.
  
    55 │     useEffect(() => {
  > 56 │         setTimeout(trapFocus, 20);
       │                    ^^^^^^^^^
    57 │         return () => {
    58 │             returnFocus();
  

./examples/store/src/lib/focus-trap.tsx:55:5 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━━━

  ! This hook specifies more dependencies than necessary: root
  
    53 │     };
    54 │ 
  > 55 │     useEffect(() => {
       │     ^^^^^^^^^
    56 │         setTimeout(trapFocus, 20);
    57 │         return () => {
  
  i This dependency can be removed from the list.
  
    58 │             returnFocus();
    59 │         };
  > 60 │     }, [root]);
       │         ^^^^
    61 │ 
    62 │     return React.createElement(
  

./examples/store/src/lib/hooks/useProductPrice.ts:51:27 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: getPercentageDiff
  
    49 │     };
    50 │ 
  > 51 │     const cheapestPrice = useMemo(() => {
       │                           ^^^^^^^
    52 │         if (!product || !cart?.region) {
    53 │             return null;
  
  i This dependency is not specified in the hook dependency list.
  
    72 │             }),
    73 │             price_type: cheapestVariant.calculated_price_type,
  > 74 │             percentage_diff: getPercentageDiff(
       │                              ^^^^^^^^^^^^^^^^^
    75 │                 cheapestVariant.original_price,
    76 │                 cheapestVariant.calculated_price,
  

./examples/store/src/lib/hooks/useProductPrice.ts:81:26 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: getPercentageDiff
  
    79 │     }, [product, cart]);
    80 │ 
  > 81 │     const variantPrice = useMemo(() => {
       │                          ^^^^^^^
    82 │         if (!product || !variantId || !cart?.region) {
    83 │             return null;
  
  i This dependency is not specified in the hook dependency list.
  
    104 │             }),
    105 │             price_type: variant.calculated_price_type,
  > 106 │             percentage_diff: getPercentageDiff(
        │                              ^^^^^^^^^^^^^^^^^
    107 │                 variant.original_price,
    108 │                 variant.calculated_price,
  

./documentation/src/hooks/use-tutorial-checklists.ts:53:26 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook specifies a dependency more specific that its captures: store
  
    51 │     const { store, toggle } = React.useContext(TutorialChecklistContext);
    52 │ 
  > 53 │     const merged = React.useMemo(() => {
       │                          ^^^^^^^
    54 │         return (
    55 │             ({ items: [] } as TutorialChecklistData)?.items.map((item) => {
  
  i This capture is more generic than...
  
    62 │                             return {
    63 │                                 ...checklistItem,
  > 64 │                                 checked: store[id]?.[checklistItem.id] ?? false,
       │                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    65 │                             };
    66 │                         })
  
  i ...this dependency.
  
    69 │             }) ?? []
    70 │         );
  > 71 │     }, [store]);
       │         ^^^^^
    72 │ 
    73 │     return {
  

./documentation/src/hooks/use-tutorial-checklists.ts:53:26 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: store[id]?.[checklistItem.id]
  
    51 │     const { store, toggle } = React.useContext(TutorialChecklistContext);
    52 │ 
  > 53 │     const merged = React.useMemo(() => {
       │                          ^^^^^^^
    54 │         return (
    55 │             ({ items: [] } as TutorialChecklistData)?.items.map((item) => {
  
  i This dependency is not specified in the hook dependency list.
  
    62 │                             return {
    63 │                                 ...checklistItem,
  > 64 │                                 checked: store[id]?.[checklistItem.id] ?? false,
       │                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    65 │                             };
    66 │                         })
  

./documentation/src/hooks/use-scroll-tracker.ts:28:5 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: callback
  
    26 │     }, []);
    27 │ 
  > 28 │     useEffect(() => {
       │     ^^^^^^^^^
    29 │         if (typeof window === "undefined") {
    30 │             return;
  
  i This dependency is not specified in the hook dependency list.
  
    57 │                     }
    58 │ 
  > 59 │                     if (callback) {
       │                         ^^^^^^^^
    60 │                         callback({
    61 │                             scrollY: nextMinDepth,
  
  i This dependency is not specified in the hook dependency list.
  
    59 │                     if (callback) {
  > 60 │                         callback({
       │                         ^^^^^^^^
    61 │                             scrollY: nextMinDepth,
    62 │                             scrollPercent,
  

./documentation/src/hooks/use-scroll-tracker.ts:28:5 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook specifies more dependencies than necessary: scrollY
  
    26 │     }, []);
    27 │ 
  > 28 │     useEffect(() => {
       │     ^^^^^^^^^
    29 │         if (typeof window === "undefined") {
    30 │             return;
  
  i This dependency can be removed from the list.
  
    78 │         return endScrollTracker;
  > 79 │     }, [scrollDepths, scrollY, state]);
       │                       ^^^^^^^
    80 │ 
    81 │     return { scrollY };
  

./documentation/src/hooks/use-pagination.ts:21:29 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: totalPages
  
    19 │     currentPage,
    20 │ }: UsePaginationProps) => {
  > 21 │     const paginationRange = useMemo(() => {
       │                             ^^^^^^^
    22 │         const totalPageNumbers = siblingCount + 5;
    23 │ 
  
  i This dependency is not specified in the hook dependency list.
  
    37 │         const firstPageIndex = 1;
  > 38 │         const lastPageIndex = totalPages;
       │                               ^^^^^^^^^^
    39 │ 
    40 │         if (!shouldShowLeftDots && shouldShowRightDots) {
  
  i This dependency is not specified in the hook dependency list.
  
    34 │         const shouldShowLeftDots = leftSiblingIndex > 2;
  > 35 │         const shouldShowRightDots = rightSiblingIndex < totalPages - 2;
       │                                                         ^^^^^^^^^^
    36 │ 
    37 │         const firstPageIndex = 1;
  
  i This dependency is not specified in the hook dependency list.
  
    29 │         const rightSiblingIndex = Math.min(
    30 │             currentPage + siblingCount,
  > 31 │             totalPages,
       │             ^^^^^^^^^^
    32 │         );
    33 │ 
  
  i This dependency is not specified in the hook dependency list.
  
    22 │         const totalPageNumbers = siblingCount + 5;
    23 │ 
  > 24 │         if (totalPageNumbers >= totalPages) {
       │                                 ^^^^^^^^^^
    25 │             return range(1, totalPages);
    26 │         }
  
  i This dependency is not specified in the hook dependency list.
  
    49 │             const rightRange = range(
    50 │                 totalPages - rightItemCount + 1,
  > 51 │                 totalPages,
       │                 ^^^^^^^^^^
    52 │             );
    53 │             return [firstPageIndex, DOTS, ...rightRange];
  
  i This dependency is not specified in the hook dependency list.
  
    48 │             const rightItemCount = 3 + 2 * siblingCount;
    49 │             const rightRange = range(
  > 50 │                 totalPages - rightItemCount + 1,
       │                 ^^^^^^^^^^
    51 │                 totalPages,
    52 │             );
  
  i This dependency is not specified in the hook dependency list.
  
    42 │             const leftRange = range(1, leftItemCount);
    43 │ 
  > 44 │             return [...leftRange, DOTS, totalPages];
       │                                         ^^^^^^^^^^
    45 │         }
    46 │ 
  
  i This dependency is not specified in the hook dependency list.
  
    24 │         if (totalPageNumbers >= totalPages) {
  > 25 │             return range(1, totalPages);
       │                             ^^^^^^^^^^
    26 │         }
    27 │ 
  

./documentation/src/hooks/use-outside-click.ts:11:11 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: callback
  
     9 │     callback: Handler,
    10 │ ) => {
  > 11 │     React.useEffect(() => {
       │           ^^^^^^^^^
    12 │         const handleClick = (event) => {
    13 │             if (ref.current && !ref.current.contains(event.target)) {
  
  i This dependency is not specified in the hook dependency list.
  
    13 │             if (ref.current && !ref.current.contains(event.target)) {
    14 │                 event.preventDefault();
  > 15 │                 callback(event);
       │                 ^^^^^^^^
    16 │             }
    17 │         };
  

./documentation/src/hooks/use-dynamic-import.ts:27:5 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: prefix
  
    25 │     const [props, setProps] = useState<DeclarationType>(null);
    26 │ 
  > 27 │     useEffect(() => {
       │     ^^^^^^^^^
    28 │         let resolved = false;
    29 │ 
  
  i This dependency is not specified in the hook dependency list.
  
    30 │         import(
    31 │             `@docgen/${
  > 32 │                 name.startsWith(prefix) ? name : `${prefix}${name}`
       │                                                     ^^^^^^
    33 │             }.json`
    34 │         )
  
  i This dependency is not specified in the hook dependency list.
  
    30 │         import(
    31 │             `@docgen/${
  > 32 │                 name.startsWith(prefix) ? name : `${prefix}${name}`
       │                                 ^^^^^^
    33 │             }.json`
    34 │         )
  

./documentation/src/hooks/use-tw-breakpoints.ts:42:11 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: breakpoints[
                    props.variant
                ].map
  
    40 │     const [xxl, setXxl] = React.useState(false);
    41 │ 
  > 42 │     React.useEffect(() => {
       │           ^^^^^^^^^
    43 │         if (typeof window !== "undefined") {
    44 │             const [smQuery, mdQuery, lgQuery, xlQuery, xxlQuery] = breakpoints[
  
  i This dependency is not specified in the hook dependency list.
  
    42 │     React.useEffect(() => {
    43 │         if (typeof window !== "undefined") {
  > 44 │             const [smQuery, mdQuery, lgQuery, xlQuery, xxlQuery] = breakpoints[
       │                                                                    ^^^^^^^^^^^^
  > 45 │                 props.variant
  > 46 │             ].map((bp) => window.matchMedia(`(min-width: ${bp}px)`));
       │             ^^^^^
    47 │ 
    48 │             const smHandler = (e: MediaQueryListEvent) => {
  
  i Either include it or remove the dependency array
  

./documentation/src/hooks/use-keydown.ts:12:11 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: callback
  
    10 │     callback: Handler,
    11 │ ) => {
  > 12 │     React.useEffect(() => {
       │           ^^^^^^^^^
    13 │         const handleKeyDown = (event) => {
    14 │             if (!ref.current) return;
  
  i This dependency is not specified in the hook dependency list.
  
    15 │             if (keys.includes(event.key)) {
    16 │                 event.preventDefault();
  > 17 │                 callback(event);
       │                 ^^^^^^^^
    18 │             }
    19 │         };
  

./documentation/src/hooks/use-keydown.ts:12:11 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: keys.includes
  
    10 │     callback: Handler,
    11 │ ) => {
  > 12 │     React.useEffect(() => {
       │           ^^^^^^^^^
    13 │         const handleKeyDown = (event) => {
    14 │             if (!ref.current) return;
  
  i This dependency is not specified in the hook dependency list.
  
    13 │         const handleKeyDown = (event) => {
    14 │             if (!ref.current) return;
  > 15 │             if (keys.includes(event.key)) {
       │                 ^^^^^^^^^^^^^
    16 │                 event.preventDefault();
    17 │                 callback(event);
  

./packages/devtools-shared/src/context.tsx:42:11 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: values.__devtools
  
    40 │     const [ws, setWs] = React.useState<WebSocket | null>(null);
    41 │ 
  > 42 │     React.useEffect(() => {
       │           ^^^^^^^^^
    43 │         const wsInstance = new WebSocket(
    44 │             `${values.secure ? "wss" : "ws"}://localhost:${values.port}`,
  
  i This dependency is not specified in the hook dependency list.
  
    59 │         wsInstance.addEventListener("open", () => {
  > 60 │             if (!values.__devtools) {
       │                  ^^^^^^^^^^^^^^^^^
    61 │                 send(wsInstance, DevtoolsEvent.DEVTOOLS_INIT, {
    62 │                     url: window.location.origin,
  
  i Either include it or remove the dependency array
  

./packages/devtools-shared/src/context.tsx:42:11 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: values.port
  
    40 │     const [ws, setWs] = React.useState<WebSocket | null>(null);
    41 │ 
  > 42 │     React.useEffect(() => {
       │           ^^^^^^^^^
    43 │         const wsInstance = new WebSocket(
    44 │             `${values.secure ? "wss" : "ws"}://localhost:${values.port}`,
  
  i This dependency is not specified in the hook dependency list.
  
    42 │     React.useEffect(() => {
    43 │         const wsInstance = new WebSocket(
  > 44 │             `${values.secure ? "wss" : "ws"}://localhost:${values.port}`,
       │                                                            ^^^^^^^^^^^
    45 │         );
    46 │ 
  
  i Either include it or remove the dependency array
  

./packages/devtools-shared/src/context.tsx:42:11 lint/correctness/useExhaustiveDependencies ━━━━━━━━━━

  ! This hook does not specify all of its dependencies: values.secure
  
    40 │     const [ws, setWs] = React.useState<WebSocket | null>(null);
    41 │ 
  > 42 │     React.useEffect(() => {
       │           ^^^^^^^^^
    43 │         const wsInstance = new WebSocket(
    44 │             `${values.secure ? "wss" : "ws"}://localhost:${values.port}`,
  
  i This dependency is not specified in the hook dependency list.
  
    42 │     React.useEffect(() => {
    43 │         const wsInstance = new WebSocket(
  > 44 │             `${values.secure ? "wss" : "ws"}://localhost:${values.port}`,
       │                ^^^^^^^^^^^^^
    45 │         );
    46 │ 
  
  i Either include it or remove the dependency array
  

The number of diagnostics exceeds the number allowed by Biome.
Diagnostics not shown: 623.
Checked 6953 file(s) in 541ms
