
> refinejs-repo@0.0.0 biome
> biome lint .

./packages/ably/src/index.ts:13:30 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
    11 │             const channelInstance = client.channels.get(channel);
    12 │ 
  > 13 │             const listener = function (message: MessageType) {
       │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 14 │                 if (types.includes("*") || types.includes(message.data.type)) {
        ...
  > 34 │                 }
  > 35 │             };
       │             ^
    36 │             channelInstance.subscribe(listener);
    37 │ 
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
    11 11 │               const channelInstance = client.channels.get(channel);
    12 12 │   
    13    │ - ············const·listener·=·function·(message:·MessageType)·{
       13 │ + ············const·listener·=·(message:·MessageType)·=>·{
    14 14 │                   if (types.includes("*") || types.includes(message.data.type)) {
    15 15 │                       if (
  

./examples/blog-next-refine-pwa/public/sw.js:73:32 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
     71 │     };
     72 │ }
   > 73 │ define(["./workbox-eac1af49"], function (workbox) {
        │                                ^^^^^^^^^^^^^^^^^^^^
   > 74 │     "use strict";
         ...
  > 125 │     );
  > 126 │ });
        │ ^
    127 │ //# sourceMappingURL=sw.js.map
    128 │ 
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
     71  71 │       };
     72  72 │   }
     73     │ - define(["./workbox-eac1af49"],·function·(workbox)·{
         73 │ + define(["./workbox-eac1af49"],·(workbox)·=>·{
     74  74 │       "use strict";
     75  75 │   
  

./examples/blog-next-refine-pwa/public/workbox-eac1af49.js:31:23 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
    29 │         };
    30 │ 
  > 31 │         const print = function (method, args) {
       │                       ^^^^^^^^^^^^^^^^^^^^^^^^^
  > 32 │             if (self.__WB_DISABLE_DEV_LOGS) {
        ...
  > 64 │             }
  > 65 │         }; // eslint-disable-next-line @typescript-eslint/ban-types
       │         ^
    66 │ 
    67 │         const api = {};
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
      29   29 │           };
      30   30 │   
      31      │ - ········const·print·=·function·(method,·args)·{
           31 │ + ········const·print·=·(method,·args)·=>·{
      32   32 │               if (self.__WB_DISABLE_DEV_LOGS) {
      33   33 │                   return;
  

./examples/blog-next-refine-pwa/public/workbox-eac1af49.js:1:21 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
     > 1 │ define(["exports"], function (exports) {
         │                     ^^^^^^^^^^^^^^^^^^^^
     > 2 │     "use strict";
     > 3 │ 
     > 4 │     try {
          ...
  > 2960 │     exports.registerRoute = registerRoute;
  > 2961 │ });
         │ ^
    2962 │ //# sourceMappingURL=workbox-eac1af49.js.map
    2963 │ 
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
       1      │ - define(["exports"],·function·(exports)·{
            1 │ + define(["exports"],·(exports)·=>·{
       2    2 │       "use strict";
       3    3 │   
  

./packages/ui-tests/src/tests/autoSaveIndicator.tsx:5:39 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
     3 │ import { render } from "@test";
     4 │ 
   > 5 │ export const autoSaveIndicatorTests = function (
       │                                       ^^^^^^^^^^
   > 6 │     AutoSaveIndicator: React.ComponentType<AutoSaveIndicatorProps>,
        ...
  > 42 │         });
  > 43 │     });
  > 44 │ };
       │ ^
    45 │ 
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
     3  3 │   import { render } from "@test";
     4  4 │   
     5    │ - export·const·autoSaveIndicatorTests·=·function·(
        5 │ + export·const·autoSaveIndicatorTests·=·(
     6  6 │       AutoSaveIndicator: React.ComponentType<AutoSaveIndicatorProps>,
     7    │ - ):·void·{
        7 │ + ):·void·=>·{
     8  8 │       describe("[@refinedev/ui-tests] Common Tests / AutoSaveIndicator", () => {
     9  9 │           it("should render success", async () => {
  

./packages/ui-tests/src/tests/pages/error.tsx:13:31 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
    11 │ } from "@test";
    12 │ 
  > 13 │ export const pageErrorTests = function (
       │                               ^^^^^^^^^^
  > 14 │     ErrorPage: React.ComponentType<RefineErrorPageProps>,
        ...
  > 68 │         });
  > 69 │     });
  > 70 │ };
       │ ^
    71 │ 
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
    11 11 │   } from "@test";
    12 12 │   
    13    │ - export·const·pageErrorTests·=·function·(
       13 │ + export·const·pageErrorTests·=·(
    14 14 │       ErrorPage: React.ComponentType<RefineErrorPageProps>,
    15    │ - ):·void·{
       15 │ + ):·void·=>·{
    16 16 │       describe("[@refinedev/ui-tests] Common Tests / Error Page", () => {
    17 17 │           it("should render successfully", async () => {
  

./packages/ui-tests/src/tests/pages/auth/forgotPassword.tsx:14:40 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
     12 │ } from "@test";
     13 │ 
   > 14 │ export const pageForgotPasswordTests = function (
        │                                        ^^^^^^^^^^
   > 15 │     ForgotPasswordPage: FC<ForgotPasswordPageProps<any, any, any>>,
         ...
  > 267 │         });
  > 268 │     });
  > 269 │ };
        │ ^
    270 │ 
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
     12  12 │   } from "@test";
     13  13 │   
     14     │ - export·const·pageForgotPasswordTests·=·function·(
         14 │ + export·const·pageForgotPasswordTests·=·(
     15  15 │       ForgotPasswordPage: FC<ForgotPasswordPageProps<any, any, any>>,
     16     │ - ):·void·{
         16 │ + ):·void·=>·{
     17  17 │       describe("[@refinedev/ui-tests] Common Tests / Forgot Password Page", () => {
     18  18 │           it("should render card title", async () => {
  

./packages/ui-tests/src/tests/pages/auth/updatePassword.tsx:13:40 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
     11 │ import { UpdatePasswordPageProps } from "@refinedev/core";
     12 │ 
   > 13 │ export const pageUpdatePasswordTests = function (
        │                                        ^^^^^^^^^^
   > 14 │     UpdatePasswordPage: FC<UpdatePasswordPageProps<any, any, any>>,
         ...
  > 230 │         });
  > 231 │     });
  > 232 │ };
        │ ^
    233 │ 
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
     11  11 │   import { UpdatePasswordPageProps } from "@refinedev/core";
     12  12 │   
     13     │ - export·const·pageUpdatePasswordTests·=·function·(
         13 │ + export·const·pageUpdatePasswordTests·=·(
     14  14 │       UpdatePasswordPage: FC<UpdatePasswordPageProps<any, any, any>>,
     15     │ - ):·void·{
         15 │ + ):·void·=>·{
     16  16 │       describe("[@refinedev/ui-tests] Common Tests / Update Password Page", () => {
     17  17 │           it("should render card title", async () => {
  

./packages/ui-tests/src/tests/pages/auth/authPage.tsx:6:30 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
     4 │ import { render, TestWrapper } from "@test";
     5 │ 
   > 6 │ export const authPageTests = function (
       │                              ^^^^^^^^^^
   > 7 │     AuthPage: FC<AuthPageProps<any, any, any>>,
        ...
  > 40 │         });
  > 41 │     });
  > 42 │ };
       │ ^
    43 │ 
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
     4  4 │   import { render, TestWrapper } from "@test";
     5  5 │   
     6    │ - export·const·authPageTests·=·function·(
        6 │ + export·const·authPageTests·=·(
     7  7 │       AuthPage: FC<AuthPageProps<any, any, any>>,
     8    │ - ):·void·{
        8 │ + ):·void·=>·{
     9  9 │       describe("[@refinedev/ui-tests] Common Tests / Auth Page", () => {
    10 10 │           it.each([
  

./packages/devtools-server/src/serve-proxy.ts:23:41 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
    21 │ };
    22 │ 
  > 23 │ const restream: Options["onProxyReq"] = function (proxyReq, req) {
       │                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 24 │     if (req.body) {
        ...
  > 31 │     }
  > 32 │ };
       │ ^
    33 │ 
    34 │ const tokenize = async (token: string) => {
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
     21  21 │   };
     22  22 │   
     23     │ - const·restream:·Options["onProxyReq"]·=·function·(proxyReq,·req)·{
         23 │ + const·restream:·Options["onProxyReq"]·=·(proxyReq,·req)·=>·{
     24  24 │       if (req.body) {
     25  25 │           const bodyData = JSON.stringify(req.body);
  

./packages/devtools-server/src/serve-proxy.ts:89:12 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
     87 │     token?: string,
     88 │ ) => NonNullable<Options["onProxyReq"]> = (token) => {
   > 89 │     return function (proxyReq, req) {
        │            ^^^^^^^^^^^^^^^^^^^^^^^^^^
   > 90 │         if (req.url.includes("self-service/logout/api")) {
         ...
   > 97 │         }
   > 98 │     };
        │     ^
     99 │ };
    100 │ 
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
     87  87 │       token?: string,
     88  88 │   ) => NonNullable<Options["onProxyReq"]> = (token) => {
     89     │ - ····return·function·(proxyReq,·req)·{
         89 │ + ····return·(proxyReq,·req)·=>·{
     90  90 │           if (req.url.includes("self-service/logout/api")) {
     91  91 │               const bodyData = JSON.stringify({
  

./packages/devtools-server/src/serve-proxy.ts:104:12 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
    102 │     onToken: (token?: string, jwt?: string) => void,
    103 │ ) => NonNullable<Options["onProxyRes"]> = (onToken) => {
  > 104 │     return function (proxyRes, req, res) {
        │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 105 │         let body = "";
         ...
  > 133 │         });
  > 134 │     };
        │     ^
    135 │ };
    136 │ 
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
    102 102 │       onToken: (token?: string, jwt?: string) => void,
    103 103 │   ) => NonNullable<Options["onProxyRes"]> = (onToken) => {
    104     │ - ····return·function·(proxyRes,·req,·res)·{
        104 │ + ····return·(proxyRes,·req,·res)·=>·{
    105 105 │           let body = "";
    106 106 │           proxyRes.on("data", (chunk) => {
  

./packages/ui-tests/src/tests/pages/auth/register.tsx:13:34 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
     11 │ import { RegisterPageProps } from "@refinedev/core";
     12 │ 
   > 13 │ export const pageRegisterTests = function (
        │                                  ^^^^^^^^^^
   > 14 │     RegisterPage: FC<RegisterPageProps<any, any, any>>,
         ...
  > 346 │         });
  > 347 │     });
  > 348 │ };
        │ ^
    349 │ 
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
     11  11 │   import { RegisterPageProps } from "@refinedev/core";
     12  12 │   
     13     │ - export·const·pageRegisterTests·=·function·(
         13 │ + export·const·pageRegisterTests·=·(
     14  14 │       RegisterPage: FC<RegisterPageProps<any, any, any>>,
     15     │ - ):·void·{
         15 │ + ):·void·=>·{
     16  16 │       describe("[@refinedev/ui-tests] Common Tests / Register Page", () => {
     17  17 │           it("should render card title", async () => {
  

./packages/ui-tests/src/tests/pages/auth/login.tsx:13:31 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
     11 │ import { LoginPageProps } from "@refinedev/core";
     12 │ 
   > 13 │ export const pageLoginTests = function (
        │                               ^^^^^^^^^^
   > 14 │     LoginPage: FC<LoginPageProps<any, any, any>>,
         ...
  > 416 │         });
  > 417 │     });
  > 418 │ };
        │ ^
    419 │ 
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
     11  11 │   import { LoginPageProps } from "@refinedev/core";
     12  12 │   
     13     │ - export·const·pageLoginTests·=·function·(
         13 │ + export·const·pageLoginTests·=·(
     14  14 │       LoginPage: FC<LoginPageProps<any, any, any>>,
     15     │ - ):·void·{
         15 │ + ):·void·=>·{
     16  16 │       describe("[@refinedev/ui-tests] Common Tests / Login Page", () => {
     17  17 │           it("should render card title", async () => {
  

./packages/ui-tests/src/tests/pages/ready.tsx:6:31 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
     4 │ import { render, TestWrapper } from "@test";
     5 │ 
   > 6 │ export const pageReadyTests = function (
       │                               ^^^^^^^^^^
   > 7 │     ReadyPage: React.ComponentType<RefineReadyPageProps>,
        ...
  > 16 │         });
  > 17 │     });
  > 18 │ };
       │ ^
    19 │ 
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
     4  4 │   import { render, TestWrapper } from "@test";
     5  5 │   
     6    │ - export·const·pageReadyTests·=·function·(
        6 │ + export·const·pageReadyTests·=·(
     7  7 │       ReadyPage: React.ComponentType<RefineReadyPageProps>,
     8    │ - ):·void·{
        8 │ + ):·void·=>·{
     9  9 │       describe("[@refinedev/ui-tests] Common Tests / Ready Page", () => {
    10 10 │           it("should render successfully", async () => {
  

./packages/ui-tests/src/tests/fields/text.tsx:6:31 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
     4 │ import { render } from "@test";
     5 │ 
   > 6 │ export const fieldTextTests = function (
       │                               ^^^^^^^^^^
   > 7 │     TextField: React.ComponentType<RefineFieldTextProps<ReactNode, any>>,
        ...
  > 14 │         });
  > 15 │     });
  > 16 │ };
       │ ^
    17 │ 
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
     4  4 │   import { render } from "@test";
     5  5 │   
     6    │ - export·const·fieldTextTests·=·function·(
        6 │ + export·const·fieldTextTests·=·(
     7  7 │       TextField: React.ComponentType<RefineFieldTextProps<ReactNode, any>>,
     8    │ - ):·void·{
        8 │ + ):·void·=>·{
     9  9 │       describe("[@refinedev/ui-tests] Common Tests / Text Field", () => {
    10 10 │           it("renders text correctly", () => {
  

./packages/ui-tests/src/tests/fields/image.tsx:6:32 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
     4 │ import { render } from "@test";
     5 │ 
   > 6 │ export const fieldImageTests = function (
       │                                ^^^^^^^^^^
   > 7 │     ImageField: React.ComponentType<
        ...
  > 25 │         });
  > 26 │     });
  > 27 │ };
       │ ^
    28 │ 
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
     4  4 │   import { render } from "@test";
     5  5 │   
     6    │ - export·const·fieldImageTests·=·function·(
        6 │ + export·const·fieldImageTests·=·(
     7  7 │       ImageField: React.ComponentType<
     8  8 │           RefineFieldImageProps<
    ····· │ 
    14 14 │           >
    15 15 │       >,
    16    │ - ):·void·{
       16 │ + ):·void·=>·{
    17 17 │       describe("[@refinedev/ui-tests] Common Tests / Image Field", () => {
    18 18 │           it("renders image with correct title", () => {
  

./packages/ui-tests/src/tests/fields/date.tsx:10:31 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
     8 │ import "dayjs/locale/tr";
     9 │ 
  > 10 │ export const fieldDateTests = function (
       │                               ^^^^^^^^^^
  > 11 │     DateField: React.ComponentType<RefineFieldDateProps<ConfigType, any, any>>,
        ...
  > 55 │         });
  > 56 │     });
  > 57 │ };
       │ ^
    58 │ 
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
     8  8 │   import "dayjs/locale/tr";
     9  9 │   
    10    │ - export·const·fieldDateTests·=·function·(
       10 │ + export·const·fieldDateTests·=·(
    11 11 │       DateField: React.ComponentType<RefineFieldDateProps<ConfigType, any, any>>,
    12    │ - ):·void·{
       12 │ + ):·void·=>·{
    13 13 │       describe("[@refinedev/ui-tests] Common Tests / Date Field", () => {
    14 14 │           it("renders date with default format", () => {
  

./packages/ui-tests/src/tests/fields/url.tsx:6:30 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
     4 │ import { render } from "@test";
     5 │ 
   > 6 │ export const fieldUrlTests = function (
       │                              ^^^^^^^^^^
   > 7 │     UrlField: React.ComponentType<
        ...
  > 40 │         });
  > 41 │     });
  > 42 │ };
       │ ^
    43 │ 
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
     4  4 │   import { render } from "@test";
     5  5 │   
     6    │ - export·const·fieldUrlTests·=·function·(
        6 │ + export·const·fieldUrlTests·=·(
     7  7 │       UrlField: React.ComponentType<
     8  8 │           RefineFieldUrlProps<string | undefined, any, any>
     9  9 │       >,
    10    │ - ):·void·{
       10 │ + ):·void·=>·{
    11 11 │       describe("[@refinedev/ui-tests] Common Tests / Url Field", () => {
    12 12 │           const url = "https://www.google.com/";
  

./packages/ui-tests/src/tests/fields/tag.tsx:6:30 lint/complexity/useArrowFunction  FIXABLE  ━━━━━━━━━━

  ! This function expression can be turned into an arrow function.
  
     4 │ import { render } from "@test";
     5 │ 
   > 6 │ export const fieldTagTests = function (
       │                              ^^^^^^^^^^
   > 7 │     TagField: React.ComponentType<RefineFieldTagProps<ReactNode, any>>,
        ...
  > 20 │         });
  > 21 │     });
  > 22 │ };
       │ ^
    23 │ 
  
  i Function expressions that don't use this can be turned into arrow functions.
  
  i Safe fix: Use an arrow function instead.
  
     4  4 │   import { render } from "@test";
     5  5 │   
     6    │ - export·const·fieldTagTests·=·function·(
        6 │ + export·const·fieldTagTests·=·(
     7  7 │       TagField: React.ComponentType<RefineFieldTagProps<ReactNode, any>>,
     8    │ - ):·void·{
        8 │ + ):·void·=>·{
     9  9 │       describe("[@refinedev/ui-tests] Common Tests / Tag Field", () => {
    10 10 │           it("renders boolean values correctly", () => {
  

The number of diagnostics exceeds the number allowed by Biome.
Diagnostics not shown: 31.
Checked 6953 file(s) in 530ms
