
> refinejs-repo@0.0.0 biome
> biome lint .

./documentation/docusaurus.config.js:52:23 lint/complexity/noExtraBooleanCast  FIXABLE  ━━━━━━━━━━━━

  ! Avoid redundant `Boolean` call
  
    50 │             "@docusaurus/preset-classic",
    51 │             {
  > 52 │                 docs: Boolean(process.env.DISABLE_DOCS)
       │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    53 │                     ? false
    54 │                     : {
  
  i It is not necessary to use `Boolean` call when a value will already be coerced to a boolean.
  
  i Unsafe fix: Remove redundant `Boolean` call
  
    52 │ ················docs:·Boolean(process.env.DISABLE_DOCS)
       │                       --------                        -

./packages/inferencer/src/utilities/get-meta-props/index.ts:61:9 lint/complexity/noExtraBooleanCast  FIXABLE  ━━━━━━━━━━

  ! Avoid redundant double-negation.
  
    60 │     const metaValues = metaByActions.join(",");
  > 61 │     if (!!metaValues.length) {
       │         ^^^^^^^^^^^^^^^^^^^
    62 │         return `meta:{${metaValues}}`;
    63 │     }
  
  i It is not necessary to use double-negation when a value will already be coerced to a boolean.
  
  i Unsafe fix: Remove redundant double-negation
  
    61 │ ····if·(!!metaValues.length)·{
       │         --                    

./packages/simple-rest/src/provider.ts:50:30 lint/complexity/noExtraBooleanCast  FIXABLE  ━━━━━━━━━━

  ! Avoid redundant double-negation.
  
    49 │         const combinedQuery = { ...query, ...queryFilters };
  > 50 │         const urlWithQuery = !!Object.keys(combinedQuery).length
       │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    51 │             ? `${url}?${stringify(combinedQuery)}`
    52 │             : url;
  
  i It is not necessary to use double-negation when a value will already be coerced to a boolean.
  
  i Unsafe fix: Remove redundant double-negation
  
    50 │ ········const·urlWithQuery·=·!!Object.keys(combinedQuery).length
       │                              --                                 

./packages/core/src/hooks/form/useForm.ts:348:14 lint/complexity/noExtraBooleanCast  FIXABLE  ━━━━━━━━━━

  ! Avoid redundant `Boolean` call
  
    346 │         (isClone || isEdit) &&
    347 │             Boolean(resourceFromProps) &&
  > 348 │             !Boolean(idFromProps) &&
        │              ^^^^^^^^^^^^^^^^^^^^
    349 │             queryOptions?.enabled !== false,
    350 │         `[useForm]: action: "${action}", resource: "${identifier}", id: ${id} \n\n` +
  
  i It is not necessary to use `Boolean` call when a value will already be coerced to a boolean.
  
  i Unsafe fix: Remove redundant `Boolean` call
  
    348 │ ············!Boolean(idFromProps)·&&
        │              --------           -   

./packages/core/src/hooks/show/useShow.ts:141:39 lint/complexity/noExtraBooleanCast  FIXABLE  ━━━━━━━━━━

  ! Avoid redundant `Boolean` call
  
    140 │     warnOnce(
  > 141 │         Boolean(resourceFromProp) && !Boolean(id),
        │                                       ^^^^^^^^^^^
    142 │         `[useShow]: resource: "${identifier}", id: ${id} \n\n` +
    143 │             `If you don't use the \`setShowId\` method to set the \`showId\`, you should pass the \`id\` prop to \`useShow\`. Otherwise, \`useShow\` will not be able to infer the \`id\` from the current URL. \n\n` +
  
  i It is not necessary to use `Boolean` call when a value will already be coerced to a boolean.
  
  i Unsafe fix: Remove redundant `Boolean` call
  
    141 │ ········Boolean(resourceFromProp)·&&·!Boolean(id),
        │                                       --------  - 

./examples/finefoods-client/src/hooks/useEventListener.ts:40:17 lint/complexity/noExtraBooleanCast  FIXABLE  ━━━━━━━━━━

  ! Avoid redundant double-negation.
  
    39 │         const eventListener: typeof handler = (event) => {
  > 40 │             if (!!savedHandler?.current) {
       │                 ^^^^^^^^^^^^^^^^^^^^^^^
    41 │                 savedHandler.current(event);
    42 │             }
  
  i It is not necessary to use double-negation when a value will already be coerced to a boolean.
  
  i Unsafe fix: Remove redundant double-negation
  
    40 │ ············if·(!!savedHandler?.current)·{
       │                 --                        

./examples/app-crm/src/components/layout/header.tsx:19:25 lint/complexity/noExtraBooleanCast  FIXABLE  ━━━━━━━━━━

  ! Avoid redundant double-negation.
  
    17 │         backgroundColor: token.colorBgElevated,
    18 │         display: "flex",
  > 19 │         justifyContent: !!searchClient ? "space-between" : "flex-end",
       │                         ^^^^^^^^^^^^^^
    20 │         alignItems: "center",
    21 │         padding: "0px 24px",
  
  i It is not necessary to use double-negation when a value will already be coerced to a boolean.
  
  i Unsafe fix: Remove redundant double-negation
  
    19 │ ········justifyContent:·!!searchClient·?·"space-between"·:·"flex-end",
       │                         --                                            

./examples/app-crm/src/components/layout/header.tsx:30:14 lint/complexity/noExtraBooleanCast  FIXABLE  ━━━━━━━━━━

  ! Avoid redundant double-negation.
  
    28 │     return (
    29 │         <Layout.Header style={headerStyles}>
  > 30 │             {!!searchClient ? <AlgoliaSearch /> : null}
       │              ^^^^^^^^^^^^^^
    31 │             <Space align="center" size="middle">
    32 │                 <Notifications />
  
  i It is not necessary to use double-negation when a value will already be coerced to a boolean.
  
  i Unsafe fix: Remove redundant double-negation
  
    30 │ ············{!!searchClient·?·<AlgoliaSearch·/>·:·null}
       │              --                                        

Checked 6953 file(s) in 541ms
