
> refinejs-repo@0.0.0 biome
> biome lint .

./examples/template-antd/src/main.tsx:5:21 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Forbidden non-null assertion.
  
    3 │ import App from "./App";
    4 │ 
  > 5 │ ReactDOM.createRoot(document.getElementById("root")!).render(
      │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    6 │   <React.StrictMode>
    7 │     <App />
  

./examples/multi-tenancy-strapi/src/pages/order/create.tsx:43:34 lint/style/noNonNullAssertion  FIXABLE  ━━━━━━━━━━

  ! Forbidden non-null assertion.
  
    41 │                     return formProps.onFinish?.({
    42 │                         ...values,
  > 43 │                         stores: [params!.tenant],
       │                                  ^^^^^^^
    44 │                     });
    45 │                 }}
  
  i Unsafe fix: Replace with optional chain operator ?. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator
  
    41 41 │                       return formProps.onFinish?.({
    42 42 │                           ...values,
    43    │ - ························stores:·[params!.tenant],
       43 │ + ························stores:·[params?.tenant],
    44 44 │                       });
    45 45 │                   }}
  

./examples/multi-tenancy-strapi/src/index.tsx:7:25 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━━━━

  ! Forbidden non-null assertion.
  
    5 │ const container = document.getElementById("root");
    6 │ // eslint-disable-next-line
  > 7 │ const root = createRoot(container!);
      │                         ^^^^^^^^^^
    8 │ root.render(
    9 │     <React.StrictMode>
  

./examples/input-date-picker/src/index.tsx:8:25 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━━━━━━━

  ! Forbidden non-null assertion.
  
     6 │ const container = document.getElementById("root");
     7 │ // eslint-disable-next-line
   > 8 │ const root = createRoot(container!);
       │                         ^^^^^^^^^^
     9 │ root.render(
    10 │     <React.StrictMode>
  

./examples/form-react-hook-form-use-form/src/index.tsx:8:25 lint/style/noNonNullAssertion ━━━━━━━━━━

  ! Forbidden non-null assertion.
  
     6 │ const container = document.getElementById("root");
     7 │ // eslint-disable-next-line
   > 8 │ const root = createRoot(container!);
       │                         ^^^^^^^^^^
     9 │ root.render(
    10 │     <React.StrictMode>
  

./examples/customization-theme-mantine/src/main.tsx:8:25 lint/style/noNonNullAssertion ━━━━━━━━━━━━━

  ! Forbidden non-null assertion.
  
     6 │ const container = document.getElementById("root");
     7 │ // eslint-disable-next-line
   > 8 │ const root = createRoot(container!);
       │                         ^^^^^^^^^^
     9 │ root.render(
    10 │     <React.StrictMode>
  

./packages/strapi-v4/test/dataProvider/index.spec.ts:33:36 lint/style/noNonNullAssertion  FIXABLE  ━━━━━━━━━━

  ! Forbidden non-null assertion.
  
    31 │     describe("deleteMany", () => {
    32 │         it("correct response", async () => {
  > 33 │             const { data } = await DataProvider(API_URL, axiosInstance)
       │                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 34 │                 .deleteMany!({ resource: "posts", ids: ["20"] });
       │                 ^^^^^^^^^^^^
    35 │ 
    36 │             expect(data[0].data.id).toBe(20);
  
  i Unsafe fix: Replace with optional chain operator ?. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator
  
     32  32 │           it("correct response", async () => {
     33  33 │               const { data } = await DataProvider(API_URL, axiosInstance)
     34     │ - ················.deleteMany!({·resource:·"posts",·ids:·["20"]·});
         34 │ + ················.deleteMany?.({·resource:·"posts",·ids:·["20"]·});
     35  35 │   
     36  36 │               expect(data[0].data.id).toBe(20);
  

./packages/strapi-v4/test/dataProvider/index.spec.ts:186:36 lint/style/noNonNullAssertion  FIXABLE  ━━━━━━━━━━

  ! Forbidden non-null assertion.
  
    184 │     describe("getMany", () => {
    185 │         it("correct response", async () => {
  > 186 │             const { data } = await DataProvider(API_URL, axiosInstance)
        │                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 187 │                 .getMany!({
        │                 ^^^^^^^^^
    188 │                 resource: "posts",
    189 │                 ids: ["30", "29"],
  
  i Unsafe fix: Replace with optional chain operator ?. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator
  
    185 185 │           it("correct response", async () => {
    186 186 │               const { data } = await DataProvider(API_URL, axiosInstance)
    187     │ - ················.getMany!({
        187 │ + ················.getMany?.({
    188 188 │                   resource: "posts",
    189 189 │                   ids: ["30", "29"],
  

./packages/strapi-v4/test/dataProvider/index.spec.ts:234:36 lint/style/noNonNullAssertion  FIXABLE  ━━━━━━━━━━

  ! Forbidden non-null assertion.
  
    232 │     describe("updateMany", () => {
    233 │         it("correct response", async () => {
  > 234 │             const { data } = await DataProvider(API_URL, axiosInstance)
        │                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 235 │                 .updateMany!({
        │                 ^^^^^^^^^^^^
    236 │                 resource: "posts",
    237 │                 ids: ["8", "17"],
  
  i Unsafe fix: Replace with optional chain operator ?. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator
  
    233 233 │           it("correct response", async () => {
    234 234 │               const { data } = await DataProvider(API_URL, axiosInstance)
    235     │ - ················.updateMany!({
        235 │ + ················.updateMany?.({
    236 236 │                   resource: "posts",
    237 237 │                   ids: ["8", "17"],
  

./packages/strapi-v4/test/dataProvider/index.spec.ts:254:36 lint/style/noNonNullAssertion  FIXABLE  ━━━━━━━━━━

  ! Forbidden non-null assertion.
  
    252 │     describe("createMany", () => {
    253 │         it("correct response", async () => {
  > 254 │             const { data } = await DataProvider(API_URL, axiosInstance)
        │                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 255 │                 .createMany!({
        │                 ^^^^^^^^^^^^
    256 │                 resource: "posts",
    257 │                 variables: [
  
  i Unsafe fix: Replace with optional chain operator ?. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator
  
    253 253 │           it("correct response", async () => {
    254 254 │               const { data } = await DataProvider(API_URL, axiosInstance)
    255     │ - ················.createMany!({
        255 │ + ················.createMany?.({
    256 256 │                   resource: "posts",
    257 257 │                   variables: [
  

./packages/strapi-v4/test/dataProvider/index.spec.ts:279:36 lint/style/noNonNullAssertion  FIXABLE  ━━━━━━━━━━

  ! Forbidden non-null assertion.
  
    277 │     describe("custom", () => {
    278 │         it("correct get response", async () => {
  > 279 │             const { data } = await DataProvider(API_URL, axiosInstance).custom!(
        │                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    280 │                 {
    281 │                     url: `${API_URL}/posts`,
  
  i Unsafe fix: Replace with optional chain operator ?. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator
  
    277 277 │       describe("custom", () => {
    278 278 │           it("correct get response", async () => {
    279     │ - ············const·{·data·}·=·await·DataProvider(API_URL,·axiosInstance).custom!(
        279 │ + ············const·{·data·}·=·await·DataProvider(API_URL,·axiosInstance).custom?.(
    280 280 │                   {
    281 281 │                       url: `${API_URL}/posts`,
  

./packages/strapi-v4/test/dataProvider/index.spec.ts:293:36 lint/style/noNonNullAssertion  FIXABLE  ━━━━━━━━━━

  ! Forbidden non-null assertion.
  
    292 │         it("correct filter response", async () => {
  > 293 │             const { data } = await DataProvider(API_URL, axiosInstance).custom!(
        │                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    294 │                 {
    295 │                     url: `${API_URL}/posts`,
  
  i Unsafe fix: Replace with optional chain operator ?. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator
  
    291 291 │   
    292 292 │           it("correct filter response", async () => {
    293     │ - ············const·{·data·}·=·await·DataProvider(API_URL,·axiosInstance).custom!(
        293 │ + ············const·{·data·}·=·await·DataProvider(API_URL,·axiosInstance).custom?.(
    294 294 │                   {
    295 295 │                       url: `${API_URL}/posts`,
  

./packages/strapi-v4/test/dataProvider/index.spec.ts:312:36 lint/style/noNonNullAssertion  FIXABLE  ━━━━━━━━━━

  ! Forbidden non-null assertion.
  
    311 │         it("correct sort response", async () => {
  > 312 │             const { data } = await DataProvider(API_URL, axiosInstance).custom!(
        │                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    313 │                 {
    314 │                     url: `${API_URL}/posts`,
  
  i Unsafe fix: Replace with optional chain operator ?. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator
  
    310 310 │   
    311 311 │           it("correct sort response", async () => {
    312     │ - ············const·{·data·}·=·await·DataProvider(API_URL,·axiosInstance).custom!(
        312 │ + ············const·{·data·}·=·await·DataProvider(API_URL,·axiosInstance).custom?.(
    313 313 │                   {
    314 314 │                       url: `${API_URL}/posts`,
  

./packages/strapi-v4/test/dataProvider/index.spec.ts:330:36 lint/style/noNonNullAssertion  FIXABLE  ━━━━━━━━━━

  ! Forbidden non-null assertion.
  
    329 │         it("correct post request", async () => {
  > 330 │             const { data } = await DataProvider(API_URL, axiosInstance).custom!(
        │                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    331 │                 {
    332 │                     url: `${API_URL}/posts`,
  
  i Unsafe fix: Replace with optional chain operator ?. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator
  
    328 328 │   
    329 329 │           it("correct post request", async () => {
    330     │ - ············const·{·data·}·=·await·DataProvider(API_URL,·axiosInstance).custom!(
        330 │ + ············const·{·data·}·=·await·DataProvider(API_URL,·axiosInstance).custom?.(
    331 331 │                   {
    332 332 │                       url: `${API_URL}/posts`,
  

./examples/auth-otp/src/index.tsx:8:25 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Forbidden non-null assertion.
  
     6 │ const container = document.getElementById("root");
     7 │ // eslint-disable-next-line
   > 8 │ const root = createRoot(container!);
       │                         ^^^^^^^^^^
     9 │ root.render(
    10 │     <React.StrictMode>
  

./examples/field-antd-use-select-basic/src/index.tsx:8:25 lint/style/noNonNullAssertion ━━━━━━━━━━━━

  ! Forbidden non-null assertion.
  
     6 │ const container = document.getElementById("root");
     7 │ // eslint-disable-next-line
   > 8 │ const root = createRoot(container!);
       │                         ^^^^^^^^^^
     9 │ root.render(
    10 │     <React.StrictMode>
  

./examples/store/src/lib/hooks/useCart.ts:17:13 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━━━━━━━

  ! Forbidden non-null assertion.
  
    15 │         resource: "carts",
    16 │         // eslint-disable-next-line
  > 17 │         id: id!,
       │             ^^^
    18 │         queryOptions: {
    19 │             enabled: !!id,
  

./examples/store/src/lib/hooks/useEnrichedLineItems.ts:17:13 lint/style/noNonNullAssertion ━━━━━━━━━━

  ! Forbidden non-null assertion.
  
    15 │     const { data: cartData } = useOne<{ cart: Cart }>({
    16 │         // eslint-disable-next-line
  > 17 │         id: cartId!,
       │             ^^^^^^^
    18 │         resource: "carts",
    19 │         queryOptions: {
  

./examples/store/src/lib/context/checkout.tsx:92:13 lint/style/noNonNullAssertion ━━━━━━━━━━━━━━━━━━

  ! Forbidden non-null assertion.
  
    90 │         resource: "shipping-options",
    91 │         // eslint-disable-next-line
  > 92 │         id: cartId!,
       │             ^^^^^^^
    93 │         queryOptions: {
    94 │             enabled: !!cartId,
  

./packages/strapi/test/dataProvider/index.spec.ts:33:36 lint/style/noNonNullAssertion  FIXABLE  ━━━━━━━━━━

  ! Forbidden non-null assertion.
  
    31 │     describe("deleteMany", () => {
    32 │         it("correct response", async () => {
  > 33 │             const { data } = await DataProvider(API_URL, axiosInstance)
       │                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 34 │                 .deleteMany!({ resource: "posts", ids: ["46"] });
       │                 ^^^^^^^^^^^^
    35 │ 
    36 │             expect(data[0]["id"]).toBe(46);
  
  i Unsafe fix: Replace with optional chain operator ?. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator
  
     32  32 │           it("correct response", async () => {
     33  33 │               const { data } = await DataProvider(API_URL, axiosInstance)
     34     │ - ················.deleteMany!({·resource:·"posts",·ids:·["46"]·});
         34 │ + ················.deleteMany?.({·resource:·"posts",·ids:·["46"]·});
     35  35 │   
     36  36 │               expect(data[0]["id"]).toBe(46);
  

The number of diagnostics exceeds the number allowed by Biome.
Diagnostics not shown: 253.
Checked 6953 file(s) in 535ms
