
> refinejs-repo@0.0.0 biome
> biome lint .

./.github/workflows/check-existing-doc-links.js:48:3 lint/style/useConst  FIXABLE  ━━━━━━━━━━━━━━━━━

  ! This let declares a variable which is never re-assigned.
  
    46 │   });
    47 │ 
  > 48 │   let success = [];
       │   ^^^
    49 │   let fail = [];
    50 │ 
  
  i 'success' is never re-assigned.
  
    46 │   });
    47 │ 
  > 48 │   let success = [];
       │       ^^^^^^^
    49 │   let fail = [];
    50 │ 
  
  i Safe fix: Use const instead.
  
    46 46 │     });
    47 47 │   
    48    │ - ··let·success·=·[];
       48 │ + ··const·success·=·[];
    49 49 │     let fail = [];
    50 50 │   
  

./.github/workflows/check-existing-doc-links.js:49:3 lint/style/useConst  FIXABLE  ━━━━━━━━━━━━━━━━━

  ! This let declares a variable which is never re-assigned.
  
    48 │   let success = [];
  > 49 │   let fail = [];
       │   ^^^
    50 │ 
    51 │   console.log("Checking for existing urls in:", sitemapUrl);
  
  i 'fail' is never re-assigned.
  
    48 │   let success = [];
  > 49 │   let fail = [];
       │       ^^^^
    50 │ 
    51 │   console.log("Checking for existing urls in:", sitemapUrl);
  
  i Safe fix: Use const instead.
  
    47 47 │   
    48 48 │     let success = [];
    49    │ - ··let·fail·=·[];
       49 │ + ··const·fail·=·[];
    50 50 │   
    51 51 │     console.log("Checking for existing urls in:", sitemapUrl);
  

./examples/blog-next-refine-pwa/public/sw.js:16:3 lint/style/useConst  FIXABLE  ━━━━━━━━━━━━━━━━━━━━

  ! This let declares a variable which is never re-assigned.
  
    14 │ // If the loader is already loaded, just stop.
    15 │ if (!self.define) {
  > 16 │   let registry = {};
       │   ^^^
    17 │ 
    18 │   // Used for `eval` and `importScripts` where we can't get script URL by other means.
  
  i 'registry' is never re-assigned.
  
    14 │ // If the loader is already loaded, just stop.
    15 │ if (!self.define) {
  > 16 │   let registry = {};
       │       ^^^^^^^^
    17 │ 
    18 │   // Used for `eval` and `importScripts` where we can't get script URL by other means.
  
  i Safe fix: Use const instead.
  
     14  14 │   // If the loader is already loaded, just stop.
     15  15 │   if (!self.define) {
     16     │ - ··let·registry·=·{};
         16 │ + ··const·registry·=·{};
     17  17 │   
     18  18 │     // Used for `eval` and `importScripts` where we can't get script URL by other means.
  

./examples/blog-next-refine-pwa/public/sw.js:38:9 lint/style/useConst  FIXABLE  ━━━━━━━━━━━━━━━━━━━━

  ! This let declares a variable which is never re-assigned.
  
    36 │         }
    37 │       }).then(() => {
  > 38 │         let promise = registry[uri];
       │         ^^^
    39 │         if (!promise) {
    40 │           throw new Error(`Module ${uri} didn’t register its module`);
  
  i 'promise' is never re-assigned.
  
    36 │         }
    37 │       }).then(() => {
  > 38 │         let promise = registry[uri];
       │             ^^^^^^^
    39 │         if (!promise) {
    40 │           throw new Error(`Module ${uri} didn’t register its module`);
  
  i Safe fix: Use const instead.
  
     36  36 │           }
     37  37 │         }).then(() => {
     38     │ - ········let·promise·=·registry[uri];
         38 │ + ········const·promise·=·registry[uri];
     39  39 │           if (!promise) {
     40  40 │             throw new Error(`Module ${uri} didn’t register its module`);
  

./examples/blog-next-refine-pwa/public/sw.js:56:5 lint/style/useConst  FIXABLE  ━━━━━━━━━━━━━━━━━━━━

  ! This let declares a variable which is never re-assigned.
  
    54 │       return;
    55 │     }
  > 56 │     let exports = {};
       │     ^^^
    57 │     const require = (depUri) => singleRequire(depUri, uri);
    58 │     const specialDeps = {
  
  i 'exports' is never re-assigned.
  
    54 │       return;
    55 │     }
  > 56 │     let exports = {};
       │         ^^^^^^^
    57 │     const require = (depUri) => singleRequire(depUri, uri);
    58 │     const specialDeps = {
  
  i Safe fix: Use const instead.
  
     54  54 │         return;
     55  55 │       }
     56     │ - ····let·exports·=·{};
         56 │ + ····const·exports·=·{};
     57  57 │       const require = (depUri) => singleRequire(depUri, uri);
     58  58 │       const specialDeps = {
  

Checked 6952 file(s) in 539ms
