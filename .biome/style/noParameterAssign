
> refinejs-repo@0.0.0 biome
> biome lint .

./examples/blog-next-refine-pwa/public/sw.js:23:5 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━━━━

  ! Reassigning a function parameter is confusing.
  
    22 │   const singleRequire = (uri, parentUri) => {
  > 23 │     uri = new URL(uri + ".js", parentUri).href;
       │     ^^^
    24 │     return (
    25 │       registry[uri] ||
  
  i The parameter is declared here:
  
    20 │   let nextDefineUri;
    21 │ 
  > 22 │   const singleRequire = (uri, parentUri) => {
       │                          ^^^
    23 │     uri = new URL(uri + ".js", parentUri).href;
    24 │     return (
  
  i Use a local variable instead.
  

./examples/blog-next-refine-pwa/public/workbox-eac1af49.js:900:17 lint/style/noParameterAssign ━━━━━━━━━━

  ! Reassigning a function parameter is confusing.
  
    898 │             payload.urlsToCache.map((entry) => {
    899 │               if (typeof entry === "string") {
  > 900 │                 entry = [entry];
        │                 ^^^^^
    901 │               }
    902 │ 
  
  i The parameter is declared here:
  
    897 │           const requestPromises = Promise.all(
  > 898 │             payload.urlsToCache.map((entry) => {
        │                                      ^^^^^
    899 │               if (typeof entry === "string") {
    900 │                 entry = [entry];
  
  i Use a local variable instead.
  

./examples/blog-next-refine-pwa/public/workbox-eac1af49.js:1065:17 lint/style/noParameterAssign ━━━━━━━━━━

  ! Reassigning a function parameter is confusing.
  
    1063 │             } catch (catchErr) {
    1064 │               if (catchErr instanceof Error) {
  > 1065 │                 err = catchErr;
         │                 ^^^
    1066 │               }
    1067 │             }
  
  i The parameter is declared here:
  
    1037 │         (this._catchHandler || catchHandler)
    1038 │       ) {
  > 1039 │         responsePromise = responsePromise.catch(async (err) => {
         │                                                        ^^^
    1040 │           // If there's a route catch handler, process that first
    1041 │           if (catchHandler) {
  
  i Use a local variable instead.
  

./examples/blog-next-refine-pwa/public/workbox-eac1af49.js:2358:9 lint/style/noParameterAssign ━━━━━━━━━━

  ! Reassigning a function parameter is confusing.
  
    2356 │       // Allow for flexible options to be passed.
    2357 │       if (options instanceof FetchEvent) {
  > 2358 │         options = {
         │         ^^^^^^^
    2359 │           event: options,
    2360 │           request: options.request,
  
  i The parameter is declared here:
  
    2353 │      */
    2354 │ 
  > 2355 │     handleAll(options) {
         │               ^^^^^^^
    2356 │       // Allow for flexible options to be passed.
    2357 │       if (options instanceof FetchEvent) {
  
  i Use a local variable instead.
  

./packages/strapi-v4/src/utils/normalizeData.ts:20:7 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━

  ! Reassigning a function parameter is confusing.
  
    18 │   if (isObject(data)) {
    19 │     if (Array.isArray(data.data)) {
  > 20 │       data = [...data.data];
       │       ^^^^
    21 │     } else if (isObject(data.data)) {
    22 │       data = flatten({ ...data.data });
  
  i The parameter is declared here:
  
    11 │   Object.prototype.toString.call(data) === "[object Object]";
    12 │ 
  > 13 │ export const normalizeData = (data: any): any => {
       │                               ^^^^^^^^^
    14 │   if (Array.isArray(data)) {
    15 │     return data.map((item) => normalizeData(item));
  
  i Use a local variable instead.
  

./packages/strapi-v4/src/utils/normalizeData.ts:22:7 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━

  ! Reassigning a function parameter is confusing.
  
    20 │       data = [...data.data];
    21 │     } else if (isObject(data.data)) {
  > 22 │       data = flatten({ ...data.data });
       │       ^^^^
    23 │     } else if (data.data === null) {
    24 │       data = null;
  
  i The parameter is declared here:
  
    11 │   Object.prototype.toString.call(data) === "[object Object]";
    12 │ 
  > 13 │ export const normalizeData = (data: any): any => {
       │                               ^^^^^^^^^
    14 │   if (Array.isArray(data)) {
    15 │     return data.map((item) => normalizeData(item));
  
  i Use a local variable instead.
  

./packages/strapi-v4/src/utils/normalizeData.ts:24:7 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━

  ! Reassigning a function parameter is confusing.
  
    22 │       data = flatten({ ...data.data });
    23 │     } else if (data.data === null) {
  > 24 │       data = null;
       │       ^^^^
    25 │     } else {
    26 │       data = flatten(data);
  
  i The parameter is declared here:
  
    11 │   Object.prototype.toString.call(data) === "[object Object]";
    12 │ 
  > 13 │ export const normalizeData = (data: any): any => {
       │                               ^^^^^^^^^
    14 │   if (Array.isArray(data)) {
    15 │     return data.map((item) => normalizeData(item));
  
  i Use a local variable instead.
  

./packages/strapi-v4/src/utils/normalizeData.ts:26:7 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━

  ! Reassigning a function parameter is confusing.
  
    24 │       data = null;
    25 │     } else {
  > 26 │       data = flatten(data);
       │       ^^^^
    27 │     }
    28 │ 
  
  i The parameter is declared here:
  
    11 │   Object.prototype.toString.call(data) === "[object Object]";
    12 │ 
  > 13 │ export const normalizeData = (data: any): any => {
       │                               ^^^^^^^^^
    14 │   if (Array.isArray(data)) {
    15 │     return data.map((item) => normalizeData(item));
  
  i Use a local variable instead.
  

./examples/store/src/lib/colors.ts:201:3 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Reassigning a function parameter is confusing.
  
    200 │ export function isDark(color = ""): boolean {
  > 201 │   color = color.toLowerCase();
        │   ^^^^^
    202 │   // Equation from http://24ways.org/2010/calculating-color-contrast
    203 │   const rgb = colorMap[color] ? hexToRgb(colorMap[color]) : hexToRgb(color);
  
  i The parameter is declared here:
  
    198 │ };
    199 │ 
  > 200 │ export function isDark(color = ""): boolean {
        │                        ^^^^^^^^^^
    201 │   color = color.toLowerCase();
    202 │   // Equation from http://24ways.org/2010/calculating-color-contrast
  
  i Use a local variable instead.
  

./documentation/src/theme/TagsList/index.tsx:27:3 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━━━━

  ! Reassigning a function parameter is confusing.
  
    25 │ const mapLabel = (label) => {
    26 │   // remove `-`
  > 27 │   label = label.replace(/-/g, " ");
       │   ^^^^^
    28 │ 
    29 │   // replace
  
  i The parameter is declared here:
  
    23 │ );
    24 │ 
  > 25 │ const mapLabel = (label) => {
       │                   ^^^^^
    26 │   // remove `-`
    27 │   label = label.replace(/-/g, " ");
  
  i Use a local variable instead.
  

./documentation/src/theme/TagsList/index.tsx:41:5 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━━━━

  ! Reassigning a function parameter is confusing.
  
    40 │   replace.forEach((element) => {
  > 41 │     label = label.replace(element[0], element[1]);
       │     ^^^^^
    42 │   });
    43 │ 
  
  i The parameter is declared here:
  
    23 │ );
    24 │ 
  > 25 │ const mapLabel = (label) => {
       │                   ^^^^^
    26 │   // remove `-`
    27 │   label = label.replace(/-/g, " ");
  
  i Use a local variable instead.
  

./packages/core/src/definitions/helpers/humanizeString/index.ts:2:3 lint/style/noParameterAssign ━━━━━━━━━━

  ! Reassigning a function parameter is confusing.
  
    1 │ export const humanizeString = (text: string): string => {
  > 2 │   text = text.replace(/([a-z]{1})([A-Z]{1})/g, "$1-$2");
      │   ^^^^
    3 │   text = text.replace(/([A-Z]{1})([A-Z]{1})([a-z]{1})/g, "$1-$2$3");
    4 │ 
  
  i The parameter is declared here:
  
  > 1 │ export const humanizeString = (text: string): string => {
      │                                ^^^^^^^^^^^^
    2 │   text = text.replace(/([a-z]{1})([A-Z]{1})/g, "$1-$2");
    3 │   text = text.replace(/([A-Z]{1})([A-Z]{1})([a-z]{1})/g, "$1-$2$3");
  
  i Use a local variable instead.
  

./packages/core/src/definitions/helpers/humanizeString/index.ts:3:3 lint/style/noParameterAssign ━━━━━━━━━━

  ! Reassigning a function parameter is confusing.
  
    1 │ export const humanizeString = (text: string): string => {
    2 │   text = text.replace(/([a-z]{1})([A-Z]{1})/g, "$1-$2");
  > 3 │   text = text.replace(/([A-Z]{1})([A-Z]{1})([a-z]{1})/g, "$1-$2$3");
      │   ^^^^
    4 │ 
    5 │   text = text
  
  i The parameter is declared here:
  
  > 1 │ export const humanizeString = (text: string): string => {
      │                                ^^^^^^^^^^^^
    2 │   text = text.replace(/([a-z]{1})([A-Z]{1})/g, "$1-$2");
    3 │   text = text.replace(/([A-Z]{1})([A-Z]{1})([a-z]{1})/g, "$1-$2$3");
  
  i Use a local variable instead.
  

./packages/core/src/definitions/helpers/humanizeString/index.ts:5:3 lint/style/noParameterAssign ━━━━━━━━━━

  ! Reassigning a function parameter is confusing.
  
    3 │   text = text.replace(/([A-Z]{1})([A-Z]{1})([a-z]{1})/g, "$1-$2$3");
    4 │ 
  > 5 │   text = text
      │   ^^^^
    6 │     .toLowerCase()
    7 │     .replace(/[_-]+/g, " ")
  
  i The parameter is declared here:
  
  > 1 │ export const humanizeString = (text: string): string => {
      │                                ^^^^^^^^^^^^
    2 │   text = text.replace(/([a-z]{1})([A-Z]{1})/g, "$1-$2");
    3 │   text = text.replace(/([A-Z]{1})([A-Z]{1})([a-z]{1})/g, "$1-$2$3");
  
  i Use a local variable instead.
  

./packages/core/src/definitions/helpers/humanizeString/index.ts:10:3 lint/style/noParameterAssign ━━━━━━━━━━

  ! Reassigning a function parameter is confusing.
  
     8 │     .replace(/\s{2,}/g, " ")
     9 │     .trim();
  > 10 │   text = text.charAt(0).toUpperCase() + text.slice(1);
       │   ^^^^
    11 │ 
    12 │   return text;
  
  i The parameter is declared here:
  
  > 1 │ export const humanizeString = (text: string): string => {
      │                                ^^^^^^^^^^^^
    2 │   text = text.replace(/([a-z]{1})([A-Z]{1})/g, "$1-$2");
    3 │   text = text.replace(/([A-Z]{1})([A-Z]{1})([a-z]{1})/g, "$1-$2$3");
  
  i Use a local variable instead.
  

./packages/core/src/hooks/data/useUpdate.ts:358:19 lint/style/noParameterAssign ━━━━━━━━━━━━━━━━━━━━

  ! Reassigning a function parameter is confusing.
  
    356 │               const data = previous.data.map((record: TData) => {
    357 │                 if (record.id?.toString() === id?.toString()) {
  > 358 │                   record = {
        │                   ^^^^^^
    359 │                     id,
    360 │                     ...record,
  
  i The parameter is declared here:
  
    354 │               }
    355 │ 
  > 356 │               const data = previous.data.map((record: TData) => {
        │                                               ^^^^^^^^^^^^^
    357 │                 if (record.id?.toString() === id?.toString()) {
    358 │                   record = {
  
  i Use a local variable instead.
  

./packages/cli/src/commands/add/sub-commands/resource/create-resources.ts:54:5 lint/style/noParameterAssign ━━━━━━━━━━

  ! Reassigning a function parameter is confusing.
  
    52 │     ]);
    53 │ 
  > 54 │     resources = [name];
       │     ^^^^^^^^^
    55 │     actions = selectedActions.join(",");
    56 │   }
  
  i The parameter is declared here:
  
    20 │ export const createResources = async (
    21 │   params: { actions?: string; path?: string },
  > 22 │   resources: string[],
       │   ^^^^^^^^^^^^^^^^^^^
    23 │ ) => {
    24 │   const destinationPath =
  
  i Use a local variable instead.
  

Checked 6952 file(s) in 457ms
