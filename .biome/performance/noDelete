
> refinejs-repo@0.0.0 biome
> biome lint .

./packages/codemod/src/transformations/refine3-to-refine4.ts:68:9 lint/performance/noDelete  FIXABLE  ━━━━━━━━━━

  ! Avoid the delete operator which can impact performance.
  
    67 │     if (hasPankodCLIInDevDependencies) {
  > 68 │         delete devDependencies["@pankod/refine-cli"];
       │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    69 │     }
    70 │ 
  
  i Unsafe fix: Use an undefined assignment instead.
  
     66  66 │   
     67  67 │       if (hasPankodCLIInDevDependencies) {
     68     │ - ········delete·devDependencies["@pankod/refine-cli"];
         68 │ + ········devDependencies["@pankod/refine-cli"]·=·undefined;
     69  69 │       }
     70  70 │   
  

./packages/core/src/definitions/helpers/keys/index.ts:82:13 lint/performance/noDelete  FIXABLE  ━━━━━━━━━━

  ! Avoid the delete operator which can impact performance.
  
    80 │                 ...newSegments[2],
    81 │             };
  > 82 │             delete newParams.method;
       │             ^^^^^^^^^^^^^^^^^^^^^^^
    83 │             delete newParams.url;
    84 │ 
  
  i Unsafe fix: Use an undefined assignment instead.
  
     80  80 │                   ...newSegments[2],
     81  81 │               };
     82     │ - ············delete·newParams.method;
         82 │ + ············newParams.method·=·undefined;
     83  83 │               delete newParams.url;
     84  84 │   
  

./packages/core/src/definitions/helpers/keys/index.ts:83:13 lint/performance/noDelete  FIXABLE  ━━━━━━━━━━

  ! Avoid the delete operator which can impact performance.
  
    81 │             };
    82 │             delete newParams.method;
  > 83 │             delete newParams.url;
       │             ^^^^^^^^^^^^^^^^^^^^
    84 │ 
    85 │             return [
  
  i Unsafe fix: Use an undefined assignment instead.
  
     81  81 │               };
     82  82 │               delete newParams.method;
     83     │ - ············delete·newParams.url;
         83 │ + ············newParams.url·=·undefined;
     84  84 │   
     85  85 │               return [
  

./packages/remix/src/parse-table-params.ts:15:5 lint/performance/noDelete  FIXABLE  ━━━━━━━━━━━━━━━━

  ! Avoid the delete operator which can impact performance.
  
    13 │     };
    14 │ 
  > 15 │     delete tableReady.current;
       │     ^^^^^^^^^^^^^^^^^^^^^^^^^
    16 │     delete tableReady.pageSize;
    17 │ 
  
  i Unsafe fix: Use an undefined assignment instead.
  
    13 13 │       };
    14 14 │   
    15    │ - ····delete·tableReady.current;
       15 │ + ····tableReady.current·=·undefined;
    16 16 │       delete tableReady.pageSize;
    17 17 │   
  

./packages/remix/src/parse-table-params.ts:16:5 lint/performance/noDelete  FIXABLE  ━━━━━━━━━━━━━━━━

  ! Avoid the delete operator which can impact performance.
  
    15 │     delete tableReady.current;
  > 16 │     delete tableReady.pageSize;
       │     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    17 │ 
    18 │     return tableReady;
  
  i Unsafe fix: Use an undefined assignment instead.
  
    14 14 │   
    15 15 │       delete tableReady.current;
    16    │ - ····delete·tableReady.pageSize;
       16 │ + ····tableReady.pageSize·=·undefined;
    17 17 │   
    18 18 │       return tableReady;
  

./documentation/src/utils/remove-active-from-files.ts:6:9 lint/performance/noDelete  FIXABLE  ━━━━━━━━━━

  ! Avoid the delete operator which can impact performance.
  
    4 │     const newFiles = Object.keys(files).reduce((acc, file) => {
    5 │         const newFile = { ...(files[file] as SandpackFile) };
  > 6 │         delete newFile.active;
      │         ^^^^^^^^^^^^^^^^^^^^^
    7 │         return { ...acc, [file]: newFile };
    8 │     }, {} as SandpackFiles);
  
  i Unsafe fix: Use an undefined assignment instead.
  
     4  4 │       const newFiles = Object.keys(files).reduce((acc, file) => {
     5  5 │           const newFile = { ...(files[file] as SandpackFile) };
     6    │ - ········delete·newFile.active;
        6 │ + ········newFile.active·=·undefined;
     7  7 │           return { ...acc, [file]: newFile };
     8  8 │       }, {} as SandpackFiles);
  

./documentation/src/utils/remove-active-from-files.ts:19:9 lint/performance/noDelete  FIXABLE  ━━━━━━━━━━

  ! Avoid the delete operator which can impact performance.
  
    17 │     const newFiles = Object.keys(files).reduce((acc, file) => {
    18 │         const newFile = { ...(files[file] as SandpackFile) };
  > 19 │         delete newFile.active;
       │         ^^^^^^^^^^^^^^^^^^^^^
    20 │         if (file === activeFile) {
    21 │             newFile.active = true;
  
  i Unsafe fix: Use an undefined assignment instead.
  
    17 17 │       const newFiles = Object.keys(files).reduce((acc, file) => {
    18 18 │           const newFile = { ...(files[file] as SandpackFile) };
    19    │ - ········delete·newFile.active;
       19 │ + ········newFile.active·=·undefined;
    20 20 │           if (file === activeFile) {
    21 21 │               newFile.active = true;
  

./packages/nextjs-router/src/common/parse-table-params.ts:15:5 lint/performance/noDelete  FIXABLE  ━━━━━━━━━━

  ! Avoid the delete operator which can impact performance.
  
    13 │     };
    14 │ 
  > 15 │     delete tableReady.current;
       │     ^^^^^^^^^^^^^^^^^^^^^^^^^
    16 │     delete tableReady.pageSize;
    17 │ 
  
  i Unsafe fix: Use an undefined assignment instead.
  
    13 13 │       };
    14 14 │   
    15    │ - ····delete·tableReady.current;
       15 │ + ····tableReady.current·=·undefined;
    16 16 │       delete tableReady.pageSize;
    17 17 │   
  

./packages/nextjs-router/src/common/parse-table-params.ts:16:5 lint/performance/noDelete  FIXABLE  ━━━━━━━━━━

  ! Avoid the delete operator which can impact performance.
  
    15 │     delete tableReady.current;
  > 16 │     delete tableReady.pageSize;
       │     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    17 │ 
    18 │     return tableReady;
  
  i Unsafe fix: Use an undefined assignment instead.
  
    14 14 │   
    15 15 │       delete tableReady.current;
    16    │ - ····delete·tableReady.pageSize;
       16 │ + ····tableReady.pageSize·=·undefined;
    17 17 │   
    18 18 │       return tableReady;
  

./examples/app-crm/src/routes/scrumboard/sales/create.tsx:207:29 lint/performance/noDelete  FIXABLE  ━━━━━━━━━━

  ! Avoid the delete operator which can impact performance.
  
    205 │                             });
    206 │ 
  > 207 │                             delete values.contactName;
        │                             ^^^^^^^^^^^^^^^^^^^^^^^^^
    208 │                             delete values.contactEmail;
    209 │ 
  
  i Unsafe fix: Use an undefined assignment instead.
  
    205 205 │                               });
    206 206 │   
    207     │ - ····························delete·values.contactName;
        207 │ + ····························values.contactName·=·undefined;
    208 208 │                               delete values.contactEmail;
    209 209 │   
  

./examples/app-crm/src/routes/scrumboard/sales/create.tsx:208:29 lint/performance/noDelete  FIXABLE  ━━━━━━━━━━

  ! Avoid the delete operator which can impact performance.
  
    207 │                             delete values.contactName;
  > 208 │                             delete values.contactEmail;
        │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
    209 │ 
    210 │                             if (data) {
  
  i Unsafe fix: Use an undefined assignment instead.
  
    206 206 │   
    207 207 │                               delete values.contactName;
    208     │ - ····························delete·values.contactEmail;
        208 │ + ····························values.contactEmail·=·undefined;
    209 209 │   
    210 210 │                               if (data) {
  

./examples/app-crm/src/routes/quotes/components/products-services.tsx:137:25 lint/performance/noDelete  FIXABLE  ━━━━━━━━━━

  ! Avoid the delete operator which can impact performance.
  
    135 │                 items?.forEach((item) => {
    136 │                     if ("totalPrice" in item) {
  > 137 │                         delete (item as any).totalPrice;
        │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    138 │                     }
    139 │                 });
  
  i Unsafe fix: Use an undefined assignment instead.
  
    135 135 │                   items?.forEach((item) => {
    136 136 │                       if ("totalPrice" in item) {
    137     │ - ························delete·(item·as·any).totalPrice;
        137 │ + ························(item·as·any).totalPrice·=·undefined;
    138 138 │                       }
    139 139 │                   });
  

Checked 6953 file(s) in 522ms
