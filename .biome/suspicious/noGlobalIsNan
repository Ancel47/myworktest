
> refinejs-repo@0.0.0 biome
> biome lint .

./documentation/src/components/tutorial-toc/index.tsx:230:33 lint/suspicious/noGlobalIsNan  FIXABLE  ━━━━━━━━━━

  ! isNaN is unsafe. It attempts a type coercion. Use Number.isNaN instead.
  
    228 │                         width="100%"
    229 │                         height="100%"
  > 230 │                         unitNo={isNaN(Number(unitNo)) ? undefined : unitNo}
        │                                 ^^^^^
    231 │                         isCurrent={doc.current}
    232 │                     />
  
  i See the MDN documentation for more details.
  
  i Unsafe fix: Use Number.isNaN instead.
  
    228 228 │                           width="100%"
    229 229 │                           height="100%"
    230     │ - ························unitNo={isNaN(Number(unitNo))·?·undefined·:·unitNo}
        230 │ + ························unitNo={Number.isNaN(Number(unitNo))·?·undefined·:·unitNo}
    231 231 │                           isCurrent={doc.current}
    232 232 │                       />
  

./packages/core/src/definitions/helpers/property-path-to-array/index.ts:4:26 lint/suspicious/noGlobalIsNan  FIXABLE  ━━━━━━━━━━

  ! isNaN is unsafe. It attempts a type coercion. Use Number.isNaN instead.
  
    2 │     return propertyPath
    3 │         .split(".")
  > 4 │         .map((item) => (!isNaN(Number(item)) ? Number(item) : item));
      │                          ^^^^^
    5 │ };
    6 │ 
  
  i See the MDN documentation for more details.
  
  i Unsafe fix: Use Number.isNaN instead.
  
    2 2 │       return propertyPath
    3 3 │           .split(".")
    4   │ - ········.map((item)·=>·(!isNaN(Number(item))·?·Number(item)·:·item));
      4 │ + ········.map((item)·=>·(!Number.isNaN(Number(item))·?·Number(item)·:·item));
    5 5 │   };
    6 6 │   
  

./packages/inferencer/src/field-inferencers/number.ts:5:23 lint/suspicious/noGlobalIsNan  FIXABLE  ━━━━━━━━━━

  ! isNaN is unsafe. It attempts a type coercion. Use Number.isNaN instead.
  
    3 │ export const numberInfer: FieldInferencer = (key, value) => {
    4 │     const isNonEmptyString = typeof value === "string" && value.length > 0;
  > 5 │     const isNotNaN = !isNaN(value as number);
      │                       ^^^^^
    6 │ 
    7 │     const isNumericString = isNonEmptyString && isNotNaN;
  
  i See the MDN documentation for more details.
  
  i Unsafe fix: Use Number.isNaN instead.
  
     3  3 │   export const numberInfer: FieldInferencer = (key, value) => {
     4  4 │       const isNonEmptyString = typeof value === "string" && value.length > 0;
     5    │ - ····const·isNotNaN·=·!isNaN(value·as·number);
        5 │ + ····const·isNotNaN·=·!Number.isNaN(value·as·number);
     6  6 │   
     7  7 │       const isNumericString = isNonEmptyString && isNotNaN;
  

./examples/blog-refine-tremor/src/pages/dashboard/details/index.tsx:306:29 lint/suspicious/noGlobalIsNan  FIXABLE  ━━━━━━━━━━

  ! isNaN is unsafe. It attempts a type coercion. Use Number.isNaN instead.
  
    304 │                     onChange={(e) => {
    305 │                         const { value } = e.target;
  > 306 │                         if (isNaN(Number(value))) {
        │                             ^^^^^
    307 │                             return;
    308 │                         }
  
  i See the MDN documentation for more details.
  
  i Unsafe fix: Use Number.isNaN instead.
  
    304 304 │                       onChange={(e) => {
    305 305 │                           const { value } = e.target;
    306     │ - ························if·(isNaN(Number(value)))·{
        306 │ + ························if·(Number.isNaN(Number(value)))·{
    307 307 │                               return;
    308 308 │                           }
  

Checked 6953 file(s) in 537ms
