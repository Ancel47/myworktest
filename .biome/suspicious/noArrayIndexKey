
> refinejs-repo@0.0.0 biome
> biome lint .

./packages/react-router-v6/src/legacy/routeProvider.tsx:270:39 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    268 │         .filter((p: RefineRouteProps) => !p.layout)
    269 │         .map((route, i) => (
  > 270 │           <Route key={`custom-route-${i}`} {...route} element={route.element} />
        │                                       ^
    271 │         ))}
    272 │       <Route
  
  i This is the source of the key value.
  
    267 │       {[...(customRoutes || [])]
    268 │         .filter((p: RefineRouteProps) => !p.layout)
  > 269 │         .map((route, i) => (
        │                      ^
    270 │           <Route key={`custom-route-${i}`} {...route} element={route.element} />
    271 │         ))}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

./packages/react-router-v6/src/legacy/routeProvider.tsx:284:36 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    282 │           .map((route, i) => (
    283 │             <Route
  > 284 │               key={`custom-route-${i}`}
        │                                    ^
    285 │               {...route}
    286 │               element={route.element}
  
  i This is the source of the key value.
  
    280 │         {[...(customRoutes || [])]
    281 │           .filter((p: RefineRouteProps) => p.layout)
  > 282 │           .map((route, i) => (
        │                        ^
    283 │             <Route
    284 │               key={`custom-route-${i}`}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

./packages/react-router-v6/src/legacy/routeProvider.tsx:329:37 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    327 │     <Routes>
    328 │       {[...(customRoutes || [])].map((route, i) => (
  > 329 │         <Route key={`custom-route-${i}`} {...route} />
        │                                     ^
    330 │       ))}
    331 │       <Route path="/" element={renderLoginRouteElement()} />
  
  i This is the source of the key value.
  
    326 │   const renderUnauthorized = () => (
    327 │     <Routes>
  > 328 │       {[...(customRoutes || [])].map((route, i) => (
        │                                              ^
    329 │         <Route key={`custom-route-${i}`} {...route} />
    330 │       ))}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

./examples/store/src/components/address/EditAddress/EditAddress.tsx:246:30 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    244 │             >
    245 │               {countries?.map((country, index) => (
  > 246 │                 <option key={index} value={country.iso_2}>
        │                              ^^^^^
    247 │                   {country.display_name}
    248 │                 </option>
  
  i This is the source of the key value.
  
    243 │               touched={touchedFields}
    244 │             >
  > 245 │               {countries?.map((country, index) => (
        │                                         ^^^^^
    246 │                 <option key={index} value={country.iso_2}>
    247 │                   {country.display_name}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

./examples/store/src/components/address/AddAddress/AddAddress.tsx:178:30 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    176 │             >
    177 │               {countries?.map((country, index) => (
  > 178 │                 <option key={index} value={country.iso_2}>
        │                              ^^^^^
    179 │                   {country.display_name}
    180 │                 </option>
  
  i This is the source of the key value.
  
    175 │               touched={touchedFields}
    176 │             >
  > 177 │               {countries?.map((country, index) => (
        │                                         ^^^^^
    178 │                 <option key={index} value={country.iso_2}>
    179 │                   {country.display_name}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

./documentation/src/components/unit-circle/index.tsx:119:20 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    117 │           return (
    118 │             <circle
  > 119 │               key={index}
        │                    ^^^^^
    120 │               className="filled-dash"
    121 │               cx={cx}
  
  i This is the source of the key value.
  
    113 │         strokeDashoffset={dashOffsetMultiple}
    114 │       />
  > 115 │       {unitItemStatuses.map((item, index) => {
        │                                    ^^^^^
    116 │         if (item.status === "completed") {
    117 │           return (
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

./documentation/src/components/tutorial-circle/index.tsx:106:20 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    104 │           return (
    105 │             <circle
  > 106 │               key={index}
        │                    ^^^^^
    107 │               className="filled-dash"
    108 │               cx={cx}
  
  i This is the source of the key value.
  
    100 │         </text>
    101 │       )}
  > 102 │       {tutorialCheckStatuses.map((item, index) => {
        │                                         ^^^^^
    103 │         if (item.status === "completed") {
    104 │           return (
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

./examples/store/src/components/profile/ProfileBillingAddress/ProfileBillingAddress.tsx:201:28 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    199 │           >
    200 │             {countries?.map((country, index) => (
  > 201 │               <option key={index} value={country.iso_2}>
        │                            ^^^^^
    202 │                 {country.display_name}
    203 │               </option>
  
  i This is the source of the key value.
  
    198 │             touched={touchedFields}
    199 │           >
  > 200 │             {countries?.map((country, index) => (
        │                                       ^^^^^
    201 │               <option key={index} value={country.iso_2}>
    202 │                 {country.display_name}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

./examples/store/src/components/common/CountrySelect/CountrySelect.tsx:41:22 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    39 │     >
    40 │       {countries?.map((country, index) => (
  > 41 │         <option key={index} value={country.iso_2}>
       │                      ^^^^^
    42 │           {country.display_name}
    43 │         </option>
  
  i This is the source of the key value.
  
    38 │       touched={touchedFields}
    39 │     >
  > 40 │       {countries?.map((country, index) => (
       │                                 ^^^^^
    41 │         <option key={index} value={country.iso_2}>
    42 │           {country.display_name}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

./documentation/src/components/refine-week/refine-week-mobile.tsx:123:20 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    121 │           return (
    122 │             <div
  > 123 │               key={index}
        │                    ^^^^^
    124 │               className={clsx(
    125 │                 "relative",
  
  i This is the source of the key value.
  
    118 │         )}
    119 │       >
  > 120 │         {data.timeline.map((item, index) => {
        │                                   ^^^^^
    121 │           return (
    122 │             <div
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

./documentation/src/components/refine-week/refine-week-desktop.tsx:109:23 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    107 │         {data.timeline.map((item, index) => {
    108 │           return (
  > 109 │             <div key={index} className={clsx("relative")}>
        │                       ^^^^^
    110 │               {item?.publishDate && (
    111 │                 <PublishCountdown
  
  i This is the source of the key value.
  
    105 │         )}
    106 │       >
  > 107 │         {data.timeline.map((item, index) => {
        │                                   ^^^^^
    108 │           return (
    109 │             <div key={index} className={clsx("relative")}>
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

./documentation/src/components/props-table/index.tsx:90:51 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    88 │         <>
    89 │           {splitted.map((t, i) => (
  > 90 │             <code className="max-w-xs h-min" key={i}>
       │                                                   ^
    91 │               <ReactMarkdown>{t}</ReactMarkdown>
    92 │             </code>
  
  i This is the source of the key value.
  
    87 │       ) : hasLongTypeInUnion && isUnion ? (
    88 │         <>
  > 89 │           {splitted.map((t, i) => (
       │                             ^
    90 │             <code className="max-w-xs h-min" key={i}>
    91 │               <ReactMarkdown>{t}</ReactMarkdown>
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

./documentation/src/components/example-list/index.tsx:262:22 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    260 │             return (
    261 │               <a
  > 262 │                 key={i}
        │                      ^
    263 │                 href={button.link}
    264 │                 className={clsx("flex items-center gap-2", "no-underline")}
  
  i This is the source of the key value.
  
    257 │             <span>Code</span>
    258 │           </a>
  > 259 │           {example.buttons.map((button, i) => {
        │                                         ^
    260 │             return (
    261 │               <a
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

./packages/inferencer/src/components/shared-code-viewer/index.tsx:346:22 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    344 │             {tokens.map((line, i) => (
    345 │               <div
  > 346 │                 key={i}
        │                      ^
    347 │                 {...getLineProps({
    348 │                   line,
  
  i This is the source of the key value.
  
    342 │             }}
    343 │           >
  > 344 │             {tokens.map((line, i) => (
        │                                ^
    345 │               <div
    346 │                 key={i}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

./packages/inferencer/src/components/shared-code-viewer/index.tsx:354:26 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    352 │                 {line.map((token, key) => (
    353 │                   <span
  > 354 │                     key={key}
        │                          ^^^
    355 │                     {...getTokenProps({
    356 │                       token,
  
  i This is the source of the key value.
  
    350 │                 })}
    351 │               >
  > 352 │                 {line.map((token, key) => (
        │                                   ^^^
    353 │                   <span
    354 │                     key={key}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

./packages/inferencer/src/components/code-highlight/index.tsx:51:25 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    49 │           >
    50 │             {tokens.map((line, i) => (
  > 51 │               <div key={i} {...getLineProps({ line, key: i })}>
       │                         ^
    52 │                 {line.map((token, key) => (
    53 │                   <span key={key} {...getTokenProps({ token, key })} />
  
  i This is the source of the key value.
  
    48 │             }}
    49 │           >
  > 50 │             {tokens.map((line, i) => (
       │                                ^
    51 │               <div key={i} {...getLineProps({ line, key: i })}>
    52 │                 {line.map((token, key) => (
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

./packages/inferencer/src/components/code-highlight/index.tsx:53:30 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    51 │               <div key={i} {...getLineProps({ line, key: i })}>
    52 │                 {line.map((token, key) => (
  > 53 │                   <span key={key} {...getTokenProps({ token, key })} />
       │                              ^^^
    54 │                 ))}
    55 │               </div>
  
  i This is the source of the key value.
  
    50 │             {tokens.map((line, i) => (
    51 │               <div key={i} {...getLineProps({ line, key: i })}>
  > 52 │                 {line.map((token, key) => (
       │                                   ^^^
    53 │                   <span key={key} {...getTokenProps({ token, key })} />
    54 │                 ))}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

./documentation/src/components/landing/showcase-wrapper.tsx:164:37 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    162 │                       line,
    163 │                     })}
  > 164 │                     key={`${code}-${i}`}
        │                                     ^
    165 │                   >
    166 │                     {line.map((token, key) => {
  
  i This is the source of the key value.
  
    157 │             {({ tokens, getLineProps, getTokenProps }) => (
    158 │               <>
  > 159 │                 {tokens.map((line, i) => (
        │                                    ^
    160 │                   <div
    161 │                     {...getLineProps({
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

./examples/app-crm-minimal/src/routes/tasks/list/index.tsx:213:38 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    211 │       {Array.from({ length: columnCount }).map((_, index) => {
    212 │         return (
  > 213 │           <KanbanColumnSkeleton key={index}>
        │                                      ^^^^^
    214 │             {Array.from({ length: itemCount }).map((_, index) => {
    215 │               return <ProjectCardSkeleton key={index} />;
  
  i This is the source of the key value.
  
    209 │   return (
    210 │     <KanbanBoardContainer>
  > 211 │       {Array.from({ length: columnCount }).map((_, index) => {
        │                                                    ^^^^^
    212 │         return (
    213 │           <KanbanColumnSkeleton key={index}>
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

./examples/app-crm-minimal/src/routes/tasks/list/index.tsx:215:48 lint/suspicious/noArrayIndexKey ━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    213 │           <KanbanColumnSkeleton key={index}>
    214 │             {Array.from({ length: itemCount }).map((_, index) => {
  > 215 │               return <ProjectCardSkeleton key={index} />;
        │                                                ^^^^^
    216 │             })}
    217 │           </KanbanColumnSkeleton>
  
  i This is the source of the key value.
  
    212 │         return (
    213 │           <KanbanColumnSkeleton key={index}>
  > 214 │             {Array.from({ length: itemCount }).map((_, index) => {
        │                                                        ^^^^^
    215 │               return <ProjectCardSkeleton key={index} />;
    216 │             })}
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

The number of diagnostics exceeds the number allowed by Biome.
Diagnostics not shown: 81.
Checked 6952 file(s) in 623ms
