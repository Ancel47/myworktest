
> refinejs-repo@0.0.0 biome
> biome lint .

./packages/chakra-ui/src/components/pages/auth/components/updatePassword/index.tsx:127:39 lint/suspicious/noDoubleEquals  FIXABLE  ━━━━━━━━━━

  ! Use !== instead of !=
  
    125 │               required: true,
    126 │               validate: (val: any) => {
  > 127 │                 if (watch("password") != val) {
        │                                       ^^
    128 │                   return translate(
    129 │                     "pages.updatePassword.errors.confirmPasswordNotMatch",
  
  i != is only allowed when comparing against null
  
    125 │               required: true,
    126 │               validate: (val: any) => {
  > 127 │                 if (watch("password") != val) {
        │                                       ^^
    128 │                   return translate(
    129 │                     "pages.updatePassword.errors.confirmPasswordNotMatch",
  
  i Using !== may be unsafe if you are relying on type coercion
  
  i Unsafe fix: Use !==
  
    127 │ ················if·(watch("password")·!==·val)·{
        │                                         +       

./packages/chakra-ui/src/components/fields/number/index.tsx:8:17 lint/suspicious/noDoubleEquals  FIXABLE  ━━━━━━━━━━

  ! Use === instead of ==
  
     6 │ function toLocaleStringSupportsOptions() {
     7 │   return !!(
   > 8 │     typeof Intl == "object" &&
       │                 ^^
     9 │     Intl &&
    10 │     typeof Intl.NumberFormat == "function"
  
  i == is only allowed when comparing against null
  
     6 │ function toLocaleStringSupportsOptions() {
     7 │   return !!(
   > 8 │     typeof Intl == "object" &&
       │                 ^^
     9 │     Intl &&
    10 │     typeof Intl.NumberFormat == "function"
  
  i Using === may be unsafe if you are relying on type coercion
  
  i Unsafe fix: Use ===
  
    8 │ ····typeof·Intl·===·"object"·&&
      │                   +            

./packages/chakra-ui/src/components/fields/number/index.tsx:10:30 lint/suspicious/noDoubleEquals  FIXABLE  ━━━━━━━━━━

  ! Use === instead of ==
  
     8 │     typeof Intl == "object" &&
     9 │     Intl &&
  > 10 │     typeof Intl.NumberFormat == "function"
       │                              ^^
    11 │   );
    12 │ }
  
  i == is only allowed when comparing against null
  
     8 │     typeof Intl == "object" &&
     9 │     Intl &&
  > 10 │     typeof Intl.NumberFormat == "function"
       │                              ^^
    11 │   );
    12 │ }
  
  i Using === may be unsafe if you are relying on type coercion
  
  i Unsafe fix: Use ===
  
    10 │ ····typeof·Intl.NumberFormat·===·"function"
       │                                +           

./examples/store/src/lib/click-outside/click-outside.tsx:40:24 lint/suspicious/noDoubleEquals  FIXABLE  ━━━━━━━━━━

  ! Use !== instead of !=
  
    38 │     }
    39 │ 
  > 40 │     if (typeof onClick != "function") {
       │                        ^^
    41 │       throw new Error("onClick must be a valid function");
    42 │     }
  
  i != is only allowed when comparing against null
  
    38 │     }
    39 │ 
  > 40 │     if (typeof onClick != "function") {
       │                        ^^
    41 │       throw new Error("onClick must be a valid function");
    42 │     }
  
  i Using !== may be unsafe if you are relying on type coercion
  
  i Unsafe fix: Use !==
  
    40 │ ····if·(typeof·onClick·!==·"function")·{
       │                          +              

./packages/mantine/src/components/fields/number/index.tsx:8:17 lint/suspicious/noDoubleEquals  FIXABLE  ━━━━━━━━━━

  ! Use === instead of ==
  
     6 │ function toLocaleStringSupportsOptions() {
     7 │   return !!(
   > 8 │     typeof Intl == "object" &&
       │                 ^^
     9 │     Intl &&
    10 │     typeof Intl.NumberFormat == "function"
  
  i == is only allowed when comparing against null
  
     6 │ function toLocaleStringSupportsOptions() {
     7 │   return !!(
   > 8 │     typeof Intl == "object" &&
       │                 ^^
     9 │     Intl &&
    10 │     typeof Intl.NumberFormat == "function"
  
  i Using === may be unsafe if you are relying on type coercion
  
  i Unsafe fix: Use ===
  
    8 │ ····typeof·Intl·===·"object"·&&
      │                   +            

./packages/mantine/src/components/fields/number/index.tsx:10:30 lint/suspicious/noDoubleEquals  FIXABLE  ━━━━━━━━━━

  ! Use === instead of ==
  
     8 │     typeof Intl == "object" &&
     9 │     Intl &&
  > 10 │     typeof Intl.NumberFormat == "function"
       │                              ^^
    11 │   );
    12 │ }
  
  i == is only allowed when comparing against null
  
     8 │     typeof Intl == "object" &&
     9 │     Intl &&
  > 10 │     typeof Intl.NumberFormat == "function"
       │                              ^^
    11 │   );
    12 │ }
  
  i Using === may be unsafe if you are relying on type coercion
  
  i Unsafe fix: Use ===
  
    10 │ ····typeof·Intl.NumberFormat·===·"function"
       │                                +           

./packages/core/src/definitions/table/index.ts:74:50 lint/suspicious/noDoubleEquals  FIXABLE  ━━━━━━━━━━

  ! Use === instead of ==
  
    72 │   ) {
    73 │     return (
  > 74 │       ("field" in left ? left.field : undefined) ==
       │                                                  ^^
    75 │         ("field" in right ? right.field : undefined) &&
    76 │       left.operator == right.operator
  
  i == is only allowed when comparing against null
  
    72 │   ) {
    73 │     return (
  > 74 │       ("field" in left ? left.field : undefined) ==
       │                                                  ^^
    75 │         ("field" in right ? right.field : undefined) &&
    76 │       left.operator == right.operator
  
  i Using === may be unsafe if you are relying on type coercion
  
  i Unsafe fix: Use ===
  
    74 │ ······("field"·in·left·?·left.field·:·undefined)·===
       │                                                    +

./packages/core/src/definitions/table/index.ts:76:21 lint/suspicious/noDoubleEquals  FIXABLE  ━━━━━━━━━━

  ! Use === instead of ==
  
    74 │       ("field" in left ? left.field : undefined) ==
    75 │         ("field" in right ? right.field : undefined) &&
  > 76 │       left.operator == right.operator
       │                     ^^
    77 │     );
    78 │   }
  
  i == is only allowed when comparing against null
  
    74 │       ("field" in left ? left.field : undefined) ==
    75 │         ("field" in right ? right.field : undefined) &&
  > 76 │       left.operator == right.operator
       │                     ^^
    77 │     );
    78 │   }
  
  i Using === may be unsafe if you are relying on type coercion
  
  i Unsafe fix: Use ===
  
    76 │ ······left.operator·===·right.operator
       │                       +               

./packages/core/src/definitions/table/index.ts:81:44 lint/suspicious/noDoubleEquals  FIXABLE  ━━━━━━━━━━

  ! Use === instead of ==
  
    80 │   return (
  > 81 │     ("key" in left ? left.key : undefined) ==
       │                                            ^^
    82 │       ("key" in right ? right.key : undefined) &&
    83 │     left.operator == right.operator
  
  i == is only allowed when comparing against null
  
    80 │   return (
  > 81 │     ("key" in left ? left.key : undefined) ==
       │                                            ^^
    82 │       ("key" in right ? right.key : undefined) &&
    83 │     left.operator == right.operator
  
  i Using === may be unsafe if you are relying on type coercion
  
  i Unsafe fix: Use ===
  
    81 │ ····("key"·in·left·?·left.key·:·undefined)·===
       │                                              +

./packages/core/src/definitions/table/index.ts:83:19 lint/suspicious/noDoubleEquals  FIXABLE  ━━━━━━━━━━

  ! Use === instead of ==
  
    81 │     ("key" in left ? left.key : undefined) ==
    82 │       ("key" in right ? right.key : undefined) &&
  > 83 │     left.operator == right.operator
       │                   ^^
    84 │   );
    85 │ };
  
  i == is only allowed when comparing against null
  
    81 │     ("key" in left ? left.key : undefined) ==
    82 │       ("key" in right ? right.key : undefined) &&
  > 83 │     left.operator == right.operator
       │                   ^^
    84 │   );
    85 │ };
  
  i Using === may be unsafe if you are relying on type coercion
  
  i Unsafe fix: Use ===
  
    83 │ ····left.operator·===·right.operator
       │                     +               

./packages/core/src/definitions/table/index.ts:88:14 lint/suspicious/noDoubleEquals  FIXABLE  ━━━━━━━━━━

  ! Use === instead of ==
  
    87 │ export const compareSorters = (left: CrudSort, right: CrudSort): boolean =>
  > 88 │   left.field == right.field;
       │              ^^
    89 │ // Keep only one CrudFilter per type according to compareFilters
    90 │ // Items in the array that is passed first to unionWith have higher priority
  
  i == is only allowed when comparing against null
  
    87 │ export const compareSorters = (left: CrudSort, right: CrudSort): boolean =>
  > 88 │   left.field == right.field;
       │              ^^
    89 │ // Keep only one CrudFilter per type according to compareFilters
    90 │ // Items in the array that is passed first to unionWith have higher priority
  
  i Using === may be unsafe if you are relying on type coercion
  
  i Unsafe fix: Use ===
  
    88 │ ··left.field·===·right.field;
       │                +             

./packages/core/src/hooks/data/useDeleteMany.ts:355:49 lint/suspicious/noDoubleEquals  FIXABLE  ━━━━━━━━━━

  ! Use === instead of ==
  
    353 │               .get(preferLegacyKeys),
    354 │             (previous?: any | null) => {
  > 355 │               if (!previous || previous.data.id == id) {
        │                                                 ^^
    356 │                 return null;
    357 │               }
  
  i == is only allowed when comparing against null
  
    353 │               .get(preferLegacyKeys),
    354 │             (previous?: any | null) => {
  > 355 │               if (!previous || previous.data.id == id) {
        │                                                 ^^
    356 │                 return null;
    357 │               }
  
  i Using === may be unsafe if you are relying on type coercion
  
  i Unsafe fix: Use ===
  
    355 │ ··············if·(!previous·||·previous.data.id·===·id)·{
        │                                                   +      

./packages/core/src/contexts/undoableQueue/undoableQueueContext.tsx:22:37 lint/suspicious/noDoubleEquals  FIXABLE  ━━━━━━━━━━

  ! Use === instead of ==
  
    20 │         return !(
    21 │           isEqual(notificationItem.id, action.payload.id) &&
  > 22 │           notificationItem.resource == action.payload.resource
       │                                     ^^
    23 │         );
    24 │       });
  
  i == is only allowed when comparing against null
  
    20 │         return !(
    21 │           isEqual(notificationItem.id, action.payload.id) &&
  > 22 │           notificationItem.resource == action.payload.resource
       │                                     ^^
    23 │         );
    24 │       });
  
  i Using === may be unsafe if you are relying on type coercion
  
  i Unsafe fix: Use ===
  
    22 │ ··········notificationItem.resource·===·action.payload.resource
       │                                       +                        

./packages/core/src/contexts/undoableQueue/undoableQueueContext.tsx:38:39 lint/suspicious/noDoubleEquals  FIXABLE  ━━━━━━━━━━

  ! Use === instead of ==
  
    36 │           !(
    37 │             isEqual(notificationItem.id, action.payload.id) &&
  > 38 │             notificationItem.resource == action.payload.resource
       │                                       ^^
    39 │           ),
    40 │       );
  
  i == is only allowed when comparing against null
  
    36 │           !(
    37 │             isEqual(notificationItem.id, action.payload.id) &&
  > 38 │             notificationItem.resource == action.payload.resource
       │                                       ^^
    39 │           ),
    40 │       );
  
  i Using === may be unsafe if you are relying on type coercion
  
  i Unsafe fix: Use ===
  
    38 │ ············notificationItem.resource·===·action.payload.resource
       │                                         +                        

./packages/core/src/contexts/undoableQueue/undoableQueueContext.tsx:45:37 lint/suspicious/noDoubleEquals  FIXABLE  ━━━━━━━━━━

  ! Use === instead of ==
  
    43 │         if (
    44 │           isEqual(notificationItem.id, action.payload.id) &&
  > 45 │           notificationItem.resource == action.payload.resource
       │                                     ^^
    46 │         ) {
    47 │           return {
  
  i == is only allowed when comparing against null
  
    43 │         if (
    44 │           isEqual(notificationItem.id, action.payload.id) &&
  > 45 │           notificationItem.resource == action.payload.resource
       │                                     ^^
    46 │         ) {
    47 │           return {
  
  i Using === may be unsafe if you are relying on type coercion
  
  i Unsafe fix: Use ===
  
    45 │ ··········notificationItem.resource·===·action.payload.resource
       │                                       +                        

./examples/app-crm-minimal/src/utilities/currency-number.ts:6:17 lint/suspicious/noDoubleEquals  FIXABLE  ━━━━━━━━━━

  ! Use === instead of ==
  
    4 │ ) => {
    5 │   if (
  > 6 │     typeof Intl == "object" &&
      │                 ^^
    7 │     Intl &&
    8 │     typeof Intl.NumberFormat == "function"
  
  i == is only allowed when comparing against null
  
    4 │ ) => {
    5 │   if (
  > 6 │     typeof Intl == "object" &&
      │                 ^^
    7 │     Intl &&
    8 │     typeof Intl.NumberFormat == "function"
  
  i Using === may be unsafe if you are relying on type coercion
  
  i Unsafe fix: Use ===
  
    6 │ ····typeof·Intl·===·"object"·&&
      │                   +            

./examples/app-crm-minimal/src/utilities/currency-number.ts:8:30 lint/suspicious/noDoubleEquals  FIXABLE  ━━━━━━━━━━

  ! Use === instead of ==
  
     6 │     typeof Intl == "object" &&
     7 │     Intl &&
   > 8 │     typeof Intl.NumberFormat == "function"
       │                              ^^
     9 │   ) {
    10 │     return new Intl.NumberFormat("en-US", {
  
  i == is only allowed when comparing against null
  
     6 │     typeof Intl == "object" &&
     7 │     Intl &&
   > 8 │     typeof Intl.NumberFormat == "function"
       │                              ^^
     9 │   ) {
    10 │     return new Intl.NumberFormat("en-US", {
  
  i Using === may be unsafe if you are relying on type coercion
  
  i Unsafe fix: Use ===
  
    8 │ ····typeof·Intl.NumberFormat·===·"function"
      │                                +           

./documentation/src/context/CommunityStats/index.tsx:100:17 lint/suspicious/noDoubleEquals  FIXABLE  ━━━━━━━━━━

  ! Use === instead of ==
  
     98 │ export const convertStatToText = (num: number) => {
     99 │   const hasIntlSupport =
  > 100 │     typeof Intl == "object" && Intl && typeof Intl.NumberFormat == "function";
        │                 ^^
    101 │ 
    102 │   if (!hasIntlSupport) {
  
  i == is only allowed when comparing against null
  
     98 │ export const convertStatToText = (num: number) => {
     99 │   const hasIntlSupport =
  > 100 │     typeof Intl == "object" && Intl && typeof Intl.NumberFormat == "function";
        │                 ^^
    101 │ 
    102 │   if (!hasIntlSupport) {
  
  i Using === may be unsafe if you are relying on type coercion
  
  i Unsafe fix: Use ===
  
    100 │ ····typeof·Intl·===·"object"·&&·Intl·&&·typeof·Intl.NumberFormat·==·"function";
        │                   +                                                            

./documentation/src/context/CommunityStats/index.tsx:100:65 lint/suspicious/noDoubleEquals  FIXABLE  ━━━━━━━━━━

  ! Use === instead of ==
  
     98 │ export const convertStatToText = (num: number) => {
     99 │   const hasIntlSupport =
  > 100 │     typeof Intl == "object" && Intl && typeof Intl.NumberFormat == "function";
        │                                                                 ^^
    101 │ 
    102 │   if (!hasIntlSupport) {
  
  i == is only allowed when comparing against null
  
     98 │ export const convertStatToText = (num: number) => {
     99 │   const hasIntlSupport =
  > 100 │     typeof Intl == "object" && Intl && typeof Intl.NumberFormat == "function";
        │                                                                 ^^
    101 │ 
    102 │   if (!hasIntlSupport) {
  
  i Using === may be unsafe if you are relying on type coercion
  
  i Unsafe fix: Use ===
  
    100 │ ····typeof·Intl·==·"object"·&&·Intl·&&·typeof·Intl.NumberFormat·===·"function";
        │                                                                   +            

./packages/mui/src/components/fields/number/index.tsx:8:17 lint/suspicious/noDoubleEquals  FIXABLE  ━━━━━━━━━━

  ! Use === instead of ==
  
     6 │ function toLocaleStringSupportsOptions() {
     7 │   return !!(
   > 8 │     typeof Intl == "object" &&
       │                 ^^
     9 │     Intl &&
    10 │     typeof Intl.NumberFormat == "function"
  
  i == is only allowed when comparing against null
  
     6 │ function toLocaleStringSupportsOptions() {
     7 │   return !!(
   > 8 │     typeof Intl == "object" &&
       │                 ^^
     9 │     Intl &&
    10 │     typeof Intl.NumberFormat == "function"
  
  i Using === may be unsafe if you are relying on type coercion
  
  i Unsafe fix: Use ===
  
    8 │ ····typeof·Intl·===·"object"·&&
      │                   +            

The number of diagnostics exceeds the number allowed by Biome.
Diagnostics not shown: 14.
Checked 6952 file(s) in 438ms
